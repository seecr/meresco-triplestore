Changeset created on Tue Dec 11 08:36:05 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Synchronous and asynchronous http client

    Synchronous http client can be used for testing purposes.
    Small fix for new transactionitem timestamp always be more than the previous one

Baseline version: 4.2.1

From 5fb120130f39b7281c514e39f475f776b74cf93e Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Fri, 7 Dec 2012 11:48:59 +0100
Subject: [PATCH 1/2] TJ/HM: newFilename timestamp must be more than lastAddedTimeStamp (only a problem on fast machines..)

---
 .../meresco/owlimhttpserver/TransactionLog.java    |    2 +-
 server/src/test/alltests.sh                        |    2 +-
 .../owlimhttpserver/TransactionLogTest.java        |   12 +++++++++---
 3 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/server/src/java/org/meresco/owlimhttpserver/TransactionLog.java b/server/src/java/org/meresco/owlimhttpserver/TransactionLog.java
index e327f46..07ffd9d 100644
--- a/server/src/java/org/meresco/owlimhttpserver/TransactionLog.java
+++ b/server/src/java/org/meresco/owlimhttpserver/TransactionLog.java
@@ -118,7 +118,7 @@ public class TransactionLog {
         long newFilename = getTime();
         ArrayList<String> sortedTsFiles = getTransactionItemFiles();
         long lastAddedTimeStamp = sortedTsFiles.size() > 1 ? Long.valueOf(sortedTsFiles.get(sortedTsFiles.size() - 2)) : 0;
-        if (newFilename < lastAddedTimeStamp) { // in theory: only small differences by ntp 
+        if (newFilename <= lastAddedTimeStamp) { // in theory: only small differences by ntp 
             return;
         }
         try {
diff --git a/server/src/test/alltests.sh b/server/src/test/alltests.sh
index 4fb40f4..c82e261 100755
--- a/server/src/test/alltests.sh
+++ b/server/src/test/alltests.sh
@@ -57,5 +57,5 @@ fi
 
 testClasses=$(cd ${BUILDDIR}; find . -name "*Test.class" | sed 's,.class,,g' | tr '/' '.' | sed 's,..,,')
 echo "Running $testClasses"
-java -classpath ".:$CP" org.junit.runner.JUnitCore $testClasses
+java -Xmx1024m -classpath ".:$CP" org.junit.runner.JUnitCore $testClasses
 
diff --git a/server/src/test/org/meresco/owlimhttpserver/TransactionLogTest.java b/server/src/test/org/meresco/owlimhttpserver/TransactionLogTest.java
index 95c92ba..61f2fa1 100644
--- a/server/src/test/org/meresco/owlimhttpserver/TransactionLogTest.java
+++ b/server/src/test/org/meresco/owlimhttpserver/TransactionLogTest.java
@@ -316,7 +316,9 @@ public class TransactionLogTest {
     	transactionLog = new TransactionLog(this.tsMock, this.tempdir, 1.0/1024/1024*5);
     	transactionLog.init();
     	transactionLog.add("testRecord", "<x>ignored</x>");
+        Thread.sleep(1);
     	transactionLog.add("testRecord2", "<x>ignored</x>");
+        Thread.sleep(1);
     	transactionLog.add("testRecord3", "<x>ignored</x>");
     	ArrayList<String> files = transactionLog.getTransactionItemFiles();
     	assertEquals(4, files.size());
@@ -500,7 +502,9 @@ public class TransactionLogTest {
     public void testSplitInMultipleTransactionFiles() throws Exception {
     	setTransactionLog(1.0/1024/1024*5);
     	transactionLog.add("test1.rdf", "ignored");
+        Thread.sleep(1);
     	transactionLog.add("test2.rdf", "ignored");
+        Thread.sleep(1);
     	transactionLog.add("test3.rdf", "ignored");
     	ArrayList<String> tsFiles = transactionLog.getTransactionItemFiles();
     	assertEquals(4, tsFiles.size());
@@ -564,12 +568,14 @@ public class TransactionLogTest {
     public void testRecoverMultipleFiles() throws Exception {
     	setTransactionLog(1.0/1024/1024*5);
     	transactionLog.add("test1.rdf", "ignored");
+        Thread.sleep(1);
     	transactionLog.add("test2.rdf", "ignored");
+        Thread.sleep(1);
     	transactionLog.add("test3.rdf", "ignored");
-    	
-    	setTransactionLog(1.0/1024/1024*5);
+
+        setTransactionLog(1.0/1024/1024*5);    	
     	String[] expected = {"add:test1.rdf|ignored", "shutdown", "startup", "add:test2.rdf|ignored", "shutdown", "startup", "add:test3.rdf|ignored", "shutdown", "startup"};
-    	assertArrayEquals(expected, tsMock.actions.toArray());
+        assertArrayEquals(expected, tsMock.actions.toArray());
     }
     
     @Test
-- 
1.7.2.5


From 828f193e0affc802e44f506071ec8ccf04689b18 Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Mon, 10 Dec 2012 14:20:14 +0100
Subject: [PATCH 2/2] HM/TJ: Synchronous owlim http client (for test purposes)

---
 client/meresco/owlim/httpclient.py |   27 +++++++++++++++++++--------
 test/client/httpclienttest.py      |   27 +++++++++++++++++++++++++--
 2 files changed, 44 insertions(+), 10 deletions(-)

diff --git a/client/meresco/owlim/httpclient.py b/client/meresco/owlim/httpclient.py
index 01c7fb0..c1a34c4 100644
--- a/client/meresco/owlim/httpclient.py
+++ b/client/meresco/owlim/httpclient.py
@@ -26,7 +26,8 @@
 # 
 ## end license ##
 
-from urllib import urlopen, urlencode
+from urllib2 import urlopen
+from urllib import urlencode
 from simplejson import loads
 
 from weightless.http import httpget, httppost
@@ -41,9 +42,10 @@ class InvalidRdfXmlException(Exception):
     pass
 
 class HttpClient(object):
-    def __init__(self, host, port):
+    def __init__(self, host, port, synchronous=False):
         self.host = host
         self.port = port
+        self.synchronous = synchronous
 
     def add(self, identifier, data, **kwargs):
         path = "/update?%s" % urlencode(dict(identifier=identifier))
@@ -75,18 +77,24 @@ class HttpClient(object):
         headers = None
         if queryResultFormat is not None:
             headers = {'Accept': queryResultFormat}
-        response = yield httpget("localhost", self.port, path, headers=headers)
-        header, body = response.split("\r\n\r\n", 1)
-        self._verify200(header, response)
+        if self.synchronous:
+            body = self._urlopen("http://localhost:%s%s" % (self.port, path))
+        else:
+            response = yield httpget("localhost", self.port, path, headers=headers)
+            header, body = response.split("\r\n\r\n", 1)
+            self._verify200(header, response)
         raise StopIteration(body)
 
     def _send(self, path, body):
         headers = None
         if body:
             headers={'Content-Type': 'text/xml', 'Content-Length': len(body)}
-        response = yield httppost(host=self.host, port=self.port, request=path, body=body, headers=headers)
-        header, body = response.split("\r\n\r\n", 1)
-        self._verify200(header, response)
+        if self.synchronous:
+            header, body = "", self._urlopen("http://%s:%s%s" % (self.host, self.port, path), data=body)
+        else:
+            response = yield httppost(host=self.host, port=self.port, request=path, body=body, headers=headers)
+            header, body = response.split("\r\n\r\n", 1)
+            self._verify200(header, response)
         raise StopIteration((header, body))
 
     def _verify200(self, header, response):
@@ -116,6 +124,9 @@ class HttpClient(object):
 
         return statement
 
+    def _urlopen(self, *args, **kwargs):
+        return urlopen(*args, **kwargs).read()
+
 
 def _results(jsonString, subj, pred, obj):
     jsonData = loads(jsonString)
diff --git a/test/client/httpclienttest.py b/test/client/httpclienttest.py
index dbca551..24c0c44 100644
--- a/test/client/httpclienttest.py
+++ b/test/client/httpclienttest.py
@@ -30,8 +30,6 @@ from seecr.test import SeecrTestCase, CallTrace
 
 from weightless.core import compose
 from weightless.io import Suspend
-from weightless.http import httppost
-from meresco.core import be, Observable
 from meresco.owlim import HttpClient, InvalidRdfXmlException, Uri, Literal
 
 
@@ -133,6 +131,31 @@ class HttpClientTest(SeecrTestCase):
         result = self._resultFromServerResponse(gen, RESULT_JSON)
         self.assertEquals(RESULT_SPO, list(result))
 
+    def testExecuteQuerySynchronous(self):
+        client = HttpClient(host="localhost", port=9999, synchronous=True)
+        client._urlopen = lambda *args, **kwargs: RESULT_JSON
+        gen = compose(client.executeQuery('SPARQL'))
+        try:
+            gen.next()
+        except StopIteration, e:
+            result = e.args[0]
+        self.assertEquals(PARSED_RESULT_JSON, result)
+
+    def testAddSynchronous(self):
+        client = HttpClient(host="localhost", port=9999, synchronous=True)
+        client._urlopen = lambda *args, **kwargs: "SOME RESPONSE"
+        list(compose(client.add(identifier="id", partname="ignored", data=rdfData)))
+
+        # list(compose(client.add(identifier="id", partname="ignored", data=rdfData)))
+        # self.assertRaises(
+        #     IOError, 
+        #     lambda: self._resultFromServerResponse(g, "Error description", responseStatus='500'))
+
+        toSend = []
+        client._urlopen = lambda url, data: toSend.append((url, data))
+        list(compose(client.add(identifier="id", partname="ignored", data=rdfData)))
+        self.assertEquals([("http://localhost:9999/update?identifier=id", rdfData)], toSend)
+
     def _resultFromServerResponse(self, g, data, responseStatus='200'):
         s = g.next()
         self.assertEquals(Suspend, type(s))
-- 
1.7.2.5

