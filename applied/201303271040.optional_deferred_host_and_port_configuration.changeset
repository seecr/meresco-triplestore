Changeset created on Wed Mar 27 10:40:36 UTC 2013 by Seecr (Seek You Too B.V.)

Description: Optional deferred host and port configuration

    Meresco Owlim HttpClient's host and port can now be determined dynamically by means of owlimServer() call to observer.

Baseline version: 6ede172718c9943eac2571f8e38be469fe9537ef

From a15baa8b79fa24e0328a99ddaa261c66e1f0c3dc Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Tue, 26 Mar 2013 16:56:03 +0100
Subject: [PATCH] HM/JPM: Meresco Owlim HttpClient's host and port can now be determined dynamically by means of owlimServer() call to observer.

---
 client/meresco/owlim/httpclient.py |   35 +++++++++++++++++++++--------
 test/client/httpclienttest.py      |   43 ++++++++++++++++++++++++++++++++++++
 2 files changed, 68 insertions(+), 10 deletions(-)

diff --git a/client/meresco/owlim/httpclient.py b/client/meresco/owlim/httpclient.py
index 4b9860b..d223d0e 100644
--- a/client/meresco/owlim/httpclient.py
+++ b/client/meresco/owlim/httpclient.py
@@ -31,6 +31,7 @@ from urllib import urlencode
 from simplejson import loads
 
 from weightless.http import httpget, httppost
+from meresco.core import Observable
 
 from literal import Literal
 from uri import Uri
@@ -41,8 +42,9 @@ JSON_EMPTY_RESULT = '{"results": {"bindings": []}}'
 class InvalidRdfXmlException(Exception):
     pass
 
-class HttpClient(object):
-    def __init__(self, host, port, synchronous=False):
+class HttpClient(Observable):
+    def __init__(self, host=None, port=None, synchronous=False):
+        Observable.__init__(self)
         self.host = host
         self.port = port
         self.synchronous = synchronous
@@ -92,10 +94,11 @@ class HttpClient(object):
         headers = None
         if queryResultFormat is not None:
             headers = {'Accept': queryResultFormat}
+        host, port = self._owlimServer()
         if self.synchronous:
-            body = self._urlopen("http://localhost:%s%s" % (self.port, path))
+            body = self._urlopen("http://%s:%s%s" % (host, port, path))
         else:
-            response = yield httpget("localhost", self.port, path, headers=headers)
+            response = yield self._httpget(host=host, port=port, request=path, headers=headers)
             header, body = response.split("\r\n\r\n", 1)
             self._verify200(header, response)
         raise StopIteration(body)
@@ -104,18 +107,15 @@ class HttpClient(object):
         headers = None
         if body:
             headers={'Content-Type': 'text/xml', 'Content-Length': len(body)}
+        host, port = self._owlimServer()
         if self.synchronous:
-            header, body = "", self._urlopen("http://%s:%s%s" % (self.host, self.port, path), data=body)
+            header, body = "", self._urlopen("http://%s:%s%s" % (host, port, path), data=body)
         else:
-            response = yield httppost(host=self.host, port=self.port, request=path, body=body, headers=headers)
+            response = yield self._httppost(host=host, port=port, request=path, body=body, headers=headers)
             header, body = response.split("\r\n\r\n", 1)
             self._verify200(header, response)
         raise StopIteration((header, body))
 
-    def _verify200(self, header, response):
-        if not header.startswith('HTTP/1.1 200'):
-            raise IOError("Expected status '200' from Owlim triplestore, but got: " + response)
-
     def _getStatementsSparQL(self, subject=None, predicate=None, object=None):
         if not subject is None and not Uri.matchesUriSyntax(subject):
             raise ValueError('subject must be an URI')
@@ -164,9 +164,24 @@ class HttpClient(object):
         mappedType = _typeMapping.get(valueDict['type'])
         return mappedType.fromDict(valueDict) if mappedType else valueDict['value']
 
+    def _verify200(self, header, response):
+        if not header.startswith('HTTP/1.1 200'):
+            raise IOError("Expected status '200' from Owlim triplestore, but got: " + response)
+
+    def _owlimServer(self):
+        if self.host:
+            return (self.host, self.port)
+        return self.call.owlimServer()
+
     def _urlopen(self, *args, **kwargs):
         return urlopen(*args, **kwargs).read()
 
+    def _httpget(self, **kwargs):
+        return httpget(**kwargs)
+
+    def _httppost(self, **kwargs):
+        return httppost(**kwargs)
+
 
 _typeMapping = {
     'literal': Literal,
diff --git a/test/client/httpclienttest.py b/test/client/httpclienttest.py
index 49157b8..16f945f 100644
--- a/test/client/httpclienttest.py
+++ b/test/client/httpclienttest.py
@@ -26,6 +26,8 @@
 #
 ## end license ##
 
+from urllib import urlencode
+
 from seecr.test import SeecrTestCase, CallTrace
 
 from weightless.core import compose
@@ -195,6 +197,47 @@ class HttpClientTest(SeecrTestCase):
         list(compose(client.importTrig(data=trigData)))
         self.assertEquals([("/import", trigData)], toSend)
 
+    def testExecuteQueryWithOwlimHostPortFromObserver(self):
+        owlimClient = HttpClient()
+        observer = CallTrace(returnValues={'owlimServer': ('localhost', 1234)})
+        owlimClient.addObserver(observer)
+        kwargs = []
+        def httpget(**_kwargs):
+            kwargs.append(_kwargs)
+            s = Suspend()
+            response = yield s
+            result = s.getResult()
+            raise StopIteration(result)
+        owlimClient._httpget = httpget
+
+        g = compose(owlimClient.executeQuery("select ?x where {}"))
+        self._resultFromServerResponse(g, RESULT_JSON)
+        self.assertEquals(['owlimServer'], observer.calledMethodNames())
+        self.assertEquals("/query?" + urlencode(dict(query='select ?x where {}')), kwargs[0]['request'])
+        self.assertEquals('localhost', kwargs[0]['host'])
+        self.assertEquals(1234, kwargs[0]['port'])
+
+    def testUpdateWithOwlimHostPortFromObserver(self):
+        owlimClient = HttpClient()
+        observer = CallTrace(returnValues={'owlimServer': ('localhost', 1234)})
+        owlimClient.addObserver(observer)
+        kwargs = []
+        def httppost(**_kwargs):
+            kwargs.append(_kwargs)
+            s = Suspend()
+            response = yield s
+            result = s.getResult()
+            raise StopIteration(result)
+        owlimClient._httppost = httppost
+
+        g = compose(owlimClient.addTriple("uri:subject", "uri:predicate", "value"))
+        self._resultFromServerResponse(g, "")
+        self.assertEquals(['owlimServer'], observer.calledMethodNames())
+        self.assertEquals("/addTriple", kwargs[0]['request'])
+        self.assertEquals('localhost', kwargs[0]['host'])
+        self.assertEquals(1234, kwargs[0]['port'])
+
+
     def _resultFromServerResponse(self, g, data, responseStatus='200'):
         s = g.next()
         self.assertEquals(Suspend, type(s))
-- 
1.7.2.5

