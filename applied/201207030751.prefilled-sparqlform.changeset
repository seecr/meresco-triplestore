Changeset created on Tue Jul 03 07:51:24 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Sparqlform prefilled with default query or query parameter

    The default query on /sparql is a list of all known prefixes and a simple 
    sparql query listing first 50 triples. 
    The OwlimTripleStore now can return a List of all known Namespaces.

Baseline version: 4.0.9.2

From 43cccf7a8e15b1832f8540d4f353397af1384350 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Hendrik=20Mor=C3=A9e?= <hendrik@seecr.nl>
Date: Mon, 2 Jul 2012 17:15:25 +0200
Subject: [PATCH 1/2] TS/HM: Print used namespace default in sparqlFrom as PREFIX

---
 .../meresco/owlimhttpserver/OwlimHttpHandler.java  |   17 ++++++++++++++---
 .../meresco/owlimhttpserver/OwlimTripleStore.java  |   13 +++++++++++++
 .../org/meresco/owlimhttpserver/TripleStore.java   |    3 +++
 .../owlimhttpserver/OwlimHttpHandlerTest.java      |   13 ++++++++++++-
 .../owlimhttpserver/OwlimTripleStoreTest.java      |   18 ++++++++++++++++++
 .../test/org/meresco/owlimhttpserver/TSMock.java   |    9 +++++++++
 6 files changed, 69 insertions(+), 4 deletions(-)

diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
index f537395..dcea91f 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
@@ -42,6 +42,8 @@ import java.net.URI;
 
 import org.openrdf.query.resultio.TupleQueryResultFormat;
 import org.openrdf.rio.RDFParseException;
+import org.openrdf.model.Namespace;
+import org.openrdf.repository.RepositoryException;
 
 
 public class OwlimHttpHandler implements HttpHandler {
@@ -79,7 +81,7 @@ public class OwlimHttpHandler implements HttpHandler {
                     _writeResponse(response, outputStream);
                     return;
                 } else if (path.equals("/sparql")) {
-                    String response = sparqlForm();
+                    String response = sparqlForm(queryParameters);
                     Headers headers = exchange.getResponseHeaders();
                     headers.set("Content-Type", "text/html");
                     exchange.sendResponseHeaders(200, 0);
@@ -155,10 +157,19 @@ public class OwlimHttpHandler implements HttpHandler {
         validator.validate(httpBody);
     }
 
-    private String sparqlForm() {
+    public String sparqlForm(QueryParameters params) {
+        String query;
+        if (params.containsKey("query")) {
+            query = params.singleValue("query");
+        } else {
+            query = "";
+            for (Namespace namespace : tripleStore.getNamespaces()) {
+                query += "PREFIX " + namespace.getPrefix() + ": <" + namespace.getName() + ">\n";
+            }
+        }
         return "<html><head><title>Meresco Owlim Sparql Form</title></head>\n"  
             + "<body><form action=\"/query\">\n"
-            + "<textarea cols=\"50\" rows=\"10\" name=\"query\"></textarea><br/>\n"
+            + "<textarea cols=\"50\" rows=\"10\" name=\"query\">" + query + "</textarea><br/>\n"
             + "<input type=\"submit\">\n"
             + "</form>\n</body></html>";
 
diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java b/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
index 12fb12f..a788f8f 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
@@ -33,6 +33,7 @@ import java.io.StringReader;
 import java.io.OutputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
+import java.util.List;
 
 import com.ontotext.trree.owlim_ext.Repository;
 import com.ontotext.trree.owlim_ext.SailImpl;
@@ -52,6 +53,7 @@ import org.openrdf.model.Resource;
 import org.openrdf.model.Statement;
 import org.openrdf.model.URI;
 import org.openrdf.model.Value;
+import org.openrdf.model.Namespace;
 
 import org.openrdf.repository.RepositoryConnection;
 import org.openrdf.repository.RepositoryException;
@@ -178,6 +180,17 @@ public class OwlimTripleStore implements TripleStore {
         }
     }
 
+    public List<Namespace> getNamespaces() {
+        RepositoryConnection conn = null;
+        try {
+            conn = repository.getConnection();
+            return conn.getNamespaces().asList();
+        } catch (RepositoryException e) {
+            throw new RuntimeException(e);
+        } finally {
+            close(conn);
+        }
+    }
 
     private void close(RepositoryConnection conn) {
         if (conn != null) {
diff --git a/server/src/java/org/meresco/owlimhttpserver/TripleStore.java b/server/src/java/org/meresco/owlimhttpserver/TripleStore.java
index 2c02b27..14aec96 100644
--- a/server/src/java/org/meresco/owlimhttpserver/TripleStore.java
+++ b/server/src/java/org/meresco/owlimhttpserver/TripleStore.java
@@ -31,8 +31,10 @@ import org.openrdf.model.Resource;
 import org.openrdf.model.Statement;
 import org.openrdf.model.URI;
 import org.openrdf.model.Value;
+import org.openrdf.model.Namespace;
 import org.openrdf.query.resultio.TupleQueryResultFormat;
 import org.openrdf.repository.RepositoryResult;
+import java.util.List;
 
 
 public interface TripleStore {
@@ -44,6 +46,7 @@ public interface TripleStore {
     String executeQuery(String sparQL, TupleQueryResultFormat format);
 
     RepositoryResult<Statement> getStatements(Resource subj, URI pred, Value obj);
+    List<Namespace> getNamespaces();
 
     void shutdown() throws Exception;
 
diff --git a/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java b/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
index dea8f9c..75335f8 100644
--- a/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
+++ b/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
@@ -134,7 +134,7 @@ public class OwlimHttpHandlerTest {
         public void close() {};
         public HttpContext getHttpContext() { return null; }
         public String getRequestMethod() { return ""; }
-        public Headers getResponseHeaders() { return null; }
+        public Headers getResponseHeaders() { return new Headers(); }
         public Headers getRequestHeaders() { return null; }
     }
 
@@ -309,4 +309,15 @@ public class OwlimHttpHandlerTest {
         assertEquals(500, exchange.responseCode);
         assertTrue(exchange.getOutput().startsWith("java.lang.RuntimeException: java.lang.Exception"));
     }
+
+    @Test public void testDefaultSparqlForm() throws Exception {
+        TSMock tsmock = new TSMock();
+        TLMock tlmock = new TLMock();
+        OwlimHttpHandler h = new OwlimHttpHandler(tlmock, tsmock);
+
+        QueryParameters queryParameters = Utils.parseQS("");
+        String sparqlForm = h.sparqlForm(queryParameters);
+        assertTrue(sparqlForm.contains("PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"));
+        assertTrue(sparqlForm.contains("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"));
+    }
 }
diff --git a/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java b/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
index 8764650..dec056b 100644
--- a/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
+++ b/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
@@ -39,6 +39,7 @@ import static org.meresco.owlimhttpserver.Utils.deleteDirectory;
 import org.openrdf.query.resultio.TupleQueryResultFormat;
 import org.openrdf.repository.RepositoryResult;
 import org.openrdf.model.Statement;
+import org.openrdf.model.Namespace;
 import org.openrdf.model.impl.URIImpl;
 import org.openrdf.model.impl.LiteralImpl;
 
@@ -85,6 +86,23 @@ public class OwlimTripleStoreTest {
     }
 
     @Test
+    public void testGetNamespaces() throws Exception {
+        ts.addRDF("uri:id0", rdf);
+        List<Namespace> namespacesList = ts.getNamespaces();
+        assertEquals(5, namespacesList.size());
+        assertEquals("http://www.w3.org/2000/01/rdf-schema#", namespacesList.get(0).getName());
+        assertEquals("rdfs", namespacesList.get(0).getPrefix());
+        assertEquals("http://www.w3.org/2002/07/owl#", namespacesList.get(1).getName());
+        assertEquals("owl", namespacesList.get(1).getPrefix());
+        assertEquals("http://www.w3.org/2001/XMLSchema#", namespacesList.get(2).getName());
+        assertEquals("xsd", namespacesList.get(2).getPrefix());
+        assertEquals("http://www.w3.org/1999/02/22-rdf-syntax-ns#", namespacesList.get(3).getName());
+        assertEquals("rdf", namespacesList.get(3).getPrefix());
+        assertEquals("http://www.example.org/terms/", namespacesList.get(4).getName());
+        assertEquals("exterms", namespacesList.get(4).getPrefix());
+    }
+
+    @Test
     public void testDelete() throws Exception {
         ts.addRDF("uri:id0", rdf);
         long startingPoint = ts.size();
diff --git a/server/src/test/org/meresco/owlimhttpserver/TSMock.java b/server/src/test/org/meresco/owlimhttpserver/TSMock.java
index 7f3d03c..e6efcdc 100644
--- a/server/src/test/org/meresco/owlimhttpserver/TSMock.java
+++ b/server/src/test/org/meresco/owlimhttpserver/TSMock.java
@@ -33,6 +33,8 @@ import org.openrdf.model.Resource;
 import org.openrdf.model.Statement;
 import org.openrdf.model.URI;
 import org.openrdf.model.Value;
+import org.openrdf.model.Namespace;
+import org.openrdf.model.impl.NamespaceImpl;
 import org.openrdf.query.resultio.TupleQueryResultFormat;
 import org.openrdf.repository.RepositoryResult;
 
@@ -73,5 +75,12 @@ public class TSMock implements TripleStore {
     public void startup() {
         actions.add("startup");
     }
+
+    public List<Namespace> getNamespaces() {
+        List<Namespace> namespaces = new ArrayList<Namespace>();
+        namespaces.add(new NamespaceImpl("rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#"));
+        namespaces.add(new NamespaceImpl("rdfs", "http://www.w3.org/2000/01/rdf-schema#"));
+        return namespaces;
+    }
 }
 
-- 
1.7.2.5


From 9945ff3828e8757ed6e8e3a58876416a59c8a7ff Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Hendrik=20Mor=C3=A9e?= <hendrik@seecr.nl>
Date: Tue, 3 Jul 2012 09:41:34 +0200
Subject: [PATCH 2/2] TS/HM: Predefined default query in /sparql textarea; Tests for
 sparqlForm

---
 .../meresco/owlimhttpserver/OwlimHttpHandler.java  |    8 +++-
 .../owlimhttpserver/OwlimHttpHandlerTest.java      |   48 +++++++++++++++++++-
 2 files changed, 52 insertions(+), 4 deletions(-)

diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
index dcea91f..c4a0a1b 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
@@ -40,6 +40,8 @@ import java.io.Writer;
 
 import java.net.URI;
 
+import org.apache.commons.lang3.StringEscapeUtils;
+
 import org.openrdf.query.resultio.TupleQueryResultFormat;
 import org.openrdf.rio.RDFParseException;
 import org.openrdf.model.Namespace;
@@ -166,12 +168,14 @@ public class OwlimHttpHandler implements HttpHandler {
             for (Namespace namespace : tripleStore.getNamespaces()) {
                 query += "PREFIX " + namespace.getPrefix() + ": <" + namespace.getName() + ">\n";
             }
+            query += "\nSELECT ?subject ?predicate ?object\n";
+            query += "WHERE { ?subject ?predicate ?object }\n";
+            query += "LIMIT 50";
         }
         return "<html><head><title>Meresco Owlim Sparql Form</title></head>\n"  
             + "<body><form action=\"/query\">\n"
-            + "<textarea cols=\"50\" rows=\"10\" name=\"query\">" + query + "</textarea><br/>\n"
+            + "<textarea cols=\"100\" rows=\"20\" name=\"query\">" + StringEscapeUtils.escapeXml(query) + "</textarea><br/>\n"
             + "<input type=\"submit\">\n"
             + "</form>\n</body></html>";
-
     }
 }
diff --git a/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java b/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
index 75335f8..1432a8e 100644
--- a/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
+++ b/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
@@ -99,6 +99,11 @@ public class OwlimHttpHandlerTest {
             actions.add(params);
             actions.add(httpBody);
         }
+        public String sparqlForm(QueryParameters params) {
+            actions.add("sparqlForm");
+            actions.add(params);
+            return "SPARQLFORM";
+        }
     }
 
     public class HttpExchangeMock extends HttpExchange {
@@ -278,6 +283,29 @@ public class OwlimHttpHandlerTest {
         }
     }
 
+    @Test public void testSparqlDispatch() throws Exception {
+        OwlimHttpHandlerMock h = new OwlimHttpHandlerMock();
+
+        HttpExchangeMock exchange = new HttpExchangeMock("/sparql", "");
+        h.handle(exchange);
+        assertEquals(2, h.actions.size());
+        assertEquals("sparqlForm", h.actions.get(0));
+        QueryParameters qp = (QueryParameters) h.actions.get(1);
+        assertEquals(0, qp.size());
+    }
+
+    @Test public void testSparqlWithQueryParametersDispatch() throws Exception {
+        OwlimHttpHandlerMock h = new OwlimHttpHandlerMock();
+
+        HttpExchangeMock exchange = new HttpExchangeMock("/sparql?query=x", "");
+        h.handle(exchange);
+        assertEquals(2, h.actions.size());
+        assertEquals("sparqlForm", h.actions.get(0));
+        QueryParameters qp = (QueryParameters) h.actions.get(1);
+        assertEquals(1, qp.size());
+        assertEquals("x", qp.singleValue("query"));
+    }
+
     @Test public void testValidateDispatch() throws Exception {
         OwlimHttpHandler h = new OwlimHttpHandler(null, null);
         HttpExchangeMock exchange = new HttpExchangeMock("/validate?identifier=IDENTIFIER", "<rdf:Description xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf\" about=\"notanuri\"/>");
@@ -317,7 +345,23 @@ public class OwlimHttpHandlerTest {
 
         QueryParameters queryParameters = Utils.parseQS("");
         String sparqlForm = h.sparqlForm(queryParameters);
-        assertTrue(sparqlForm.contains("PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"));
-        assertTrue(sparqlForm.contains("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"));
+        String expectedQuery = "PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;\n" + 
+            "PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n" +
+            "\n" +
+            "SELECT ?subject ?predicate ?object\n" +
+            "WHERE { ?subject ?predicate ?object }\n" +
+            "LIMIT 50";
+        assertTrue(sparqlForm, sparqlForm.contains(expectedQuery));
+    }
+
+    @Test public void testSparqlFormWithQueryArgument() throws Exception {
+        TSMock tsmock = new TSMock();
+        TLMock tlmock = new TLMock();
+        OwlimHttpHandler h = new OwlimHttpHandler(tlmock, tsmock);
+
+        QueryParameters queryParameters = Utils.parseQS("query=SELECT+%3Fx+WHERE+%7B%7D%0A");
+        String sparqlForm = h.sparqlForm(queryParameters);
+        String expectedQuery = "SELECT ?x WHERE {}\n";
+        assertTrue(sparqlForm, sparqlForm.contains(expectedQuery));
     }
 }
-- 
1.7.2.5

