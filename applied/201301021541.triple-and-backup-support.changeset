Changeset created on Wed Jan 02 15:41:28 UTC 2013 by Seecr (Seek You Too B.V.)

Description: Support for adding and removing singled triples; Backup support

    Added: /addTriple with subj|pred|obj as body
           /removeTriple with subj|pred|obj as body
           /export?identifier=<backup id>

Baseline version: 4.2.2

From b39a6cf811ac803bd08b2cb030632fa84517e7d7 Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Mon, 24 Dec 2012 16:11:57 +0100
Subject: [PATCH 01/10] JPM/HM: Added addTriple, removeTriple

---
 client/meresco/owlim/httpclient.py                 |   18 ++++++-
 .../meresco/owlimhttpserver/OwlimHttpHandler.java  |   16 ++++++-
 .../meresco/owlimhttpserver/OwlimTripleStore.java  |   42 ++++++++++++++++
 .../meresco/owlimhttpserver/TransactionLog.java    |   21 +++++++-
 .../org/meresco/owlimhttpserver/TripleStore.java   |    2 +
 .../owlimhttpserver/OwlimHttpHandlerTest.java      |   27 +++++++++++
 .../owlimhttpserver/OwlimTripleStoreTest.java      |    9 ++++
 .../test/org/meresco/owlimhttpserver/TLMock.java   |   11 ++++
 .../test/org/meresco/owlimhttpserver/TSMock.java   |    8 +++
 .../owlimhttpserver/TransactionLogTest.java        |   50 ++++++++++++++++++++
 test/client/httpclienttest.py                      |   43 ++++++++++++-----
 11 files changed, 227 insertions(+), 20 deletions(-)

diff --git a/client/meresco/owlim/httpclient.py b/client/meresco/owlim/httpclient.py
index c1a34c4..490f059 100644
--- a/client/meresco/owlim/httpclient.py
+++ b/client/meresco/owlim/httpclient.py
@@ -29,6 +29,7 @@
 from urllib2 import urlopen
 from urllib import urlencode
 from simplejson import loads
+from Ft.Xml.Lib import Uri as FtUri 
 
 from weightless.http import httpget, httppost
 
@@ -51,6 +52,12 @@ class HttpClient(object):
         path = "/update?%s" % urlencode(dict(identifier=identifier))
         yield self._send(path=path, body=data)
 
+    def addTriple(self, subj, pred, obj):
+        yield self._send(path="/addTriple", body='|'.join([subj, pred, obj]))
+
+    def removeTriple(self, subj, pred, obj):
+        yield self._send(path="/removeTriple", body='|'.join([subj, pred, obj]))
+
     def delete(self, identifier, **kwargs):
         path = "/delete?%s" % urlencode(dict(identifier=identifier))
         yield self._send(path=path, body=None)
@@ -103,12 +110,14 @@ class HttpClient(object):
 
     def _createSparQL(self, subj=None, pred=None, obj=None):
         statement = "SELECT DISTINCT"
-        if subj == None:
+        if subj is None:
             statement += " ?s"
-        if pred == None:
+        if pred is None:
             statement += " ?p"
-        if obj == None:
+        if obj is None:
             statement += " ?o"
+        if (subj and pred and obj):
+            statement += " *"
         statement += " WHERE {"
 
         if subj and subj[0] != '<' and subj[-1] != '>':
@@ -116,6 +125,9 @@ class HttpClient(object):
         if pred and pred[0] != '<' and pred[-1] != '>':
             pred = '<%s>' % pred
 
+        if obj and not FtUri.MatchesUriSyntax(obj):
+            obj = '"%s"' % obj
+
         statement += " " + subj if subj else " ?s"
         statement += " " + pred if pred else " ?p"
         statement += " " + obj if obj else " ?o"
diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
index edb047e..61aa49c 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
@@ -48,6 +48,9 @@ import org.apache.commons.lang3.StringEscapeUtils;
 import org.openrdf.query.resultio.TupleQueryResultFormat;
 import org.openrdf.rio.RDFParseException;
 import org.openrdf.model.Namespace;
+import org.openrdf.model.Value;
+import org.openrdf.model.impl.URIImpl;
+import org.openrdf.model.impl.LiteralImpl;
 import org.openrdf.repository.RepositoryException;
 
 public class OwlimHttpHandler implements HttpHandler {
@@ -68,7 +71,7 @@ public class OwlimHttpHandler implements HttpHandler {
         String rawQueryString = requestURI.getRawQuery();
         QueryParameters queryParameters = Utils.parseQS(rawQueryString);
         OutputStream outputStream = exchange.getResponseBody();
-       
+
         try {
             try {
                 if (path.equals("/add")) {
@@ -79,6 +82,9 @@ public class OwlimHttpHandler implements HttpHandler {
                     updateRDF(queryParameters, body);
                 } else if (path.equals("/delete")) {
                     deleteRDF(queryParameters);
+                } else if (path.equals("/addTriple")) {
+                    String body = Utils.read(exchange.getRequestBody());
+                    addTriple(body);
                 } else if (path.equals("/query")) {
                     String response = "";
                     Headers requestHeaders = exchange.getRequestHeaders();
@@ -168,11 +174,19 @@ public class OwlimHttpHandler implements HttpHandler {
         transactionLog.add(identifier, httpBody);
     }
 
+    public void addTriple(String httpBody) throws TransactionLogException, IOException {
+        transactionLog.addTriple(httpBody);
+    }
+
     public void deleteRDF(QueryParameters params) throws TransactionLogException, IOException {
         String identifier = params.singleValue("identifier");
         transactionLog.delete(identifier);
     }
 
+    public void removeTriple(String httpBody) throws TransactionLogException, IOException {
+        transactionLog.removeTriple(httpBody);
+    }
+
     public String executeQuery(QueryParameters params) {
         return this.executeQuery(params, TupleQueryResultFormat.JSON);
     }
diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java b/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
index a164309..c30fb5f 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
@@ -49,6 +49,8 @@ import org.openrdf.query.TupleQueryResult;
 import org.openrdf.query.TupleQueryResultHandlerException;
 
 import org.openrdf.model.impl.URIImpl;
+import org.openrdf.model.impl.LiteralImpl;
+import org.openrdf.model.impl.StatementImpl;
 import org.openrdf.model.Resource;
 import org.openrdf.model.Statement;
 import org.openrdf.model.URI;
@@ -106,6 +108,26 @@ public class OwlimTripleStore implements TripleStore {
         }
     }
 
+    public void addTriple(String tripleData) {
+        RepositoryConnection conn = null;
+        String[] values = tripleData.split("\\|");
+        Value object = null;
+        try {
+            object = new URIImpl(values[2]);
+        } catch (IllegalArgumentException e) {
+            object = new LiteralImpl(values[2]);
+        }
+        try {
+            conn = repository.getConnection();
+            conn.setAutoCommit(false);
+            conn.add(new URIImpl(values[0]), new URIImpl(values[1]), object);
+        } catch (RepositoryException e) {
+            throw new RuntimeException(e);
+        } finally {
+            close(conn);
+        }   
+    }
+
     public void delete(String identifier) {
         URI context = new URIImpl(identifier);
         RepositoryConnection conn = null;
@@ -120,6 +142,26 @@ public class OwlimTripleStore implements TripleStore {
         }
     }
 
+    public void removeTriple(String tripleData) {
+        RepositoryConnection conn = null;
+        String[] values = tripleData.split("\\|");
+        Value object = null;
+        try {
+            object = new URIImpl(values[2]);
+        } catch (IllegalArgumentException e) {
+            object = new LiteralImpl(values[2]);
+        }
+        try {
+            conn = repository.getConnection();
+            conn.setAutoCommit(false);
+            conn.remove(new URIImpl(values[0]), new URIImpl(values[1]), object);
+        } catch (RepositoryException e) {
+            throw new RuntimeException(e);
+        } finally {
+            close(conn);
+        }   
+    }
+
     public long size() {
         RepositoryConnection conn = null;
         try {
diff --git a/server/src/java/org/meresco/owlimhttpserver/TransactionLog.java b/server/src/java/org/meresco/owlimhttpserver/TransactionLog.java
index 07ffd9d..0860b26 100644
--- a/server/src/java/org/meresco/owlimhttpserver/TransactionLog.java
+++ b/server/src/java/org/meresco/owlimhttpserver/TransactionLog.java
@@ -36,6 +36,9 @@ import java.util.Arrays;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Date;
+import org.openrdf.model.Value;
+import org.openrdf.model.URI;
+import org.openrdf.model.Resource;
 
 public class TransactionLog {
     TripleStore tripleStore;
@@ -80,11 +83,19 @@ public class TransactionLog {
         this.transactionLog = new BufferedWriter(new FileWriter(this.transactionLogFilePath), BUFFER_SIZE);
     }
 
-    public void add(String identifier, String filedata) throws TransactionLogException, FileNotFoundException, IOException {
+    public void add(String identifier, String filedata) throws TransactionLogException, IOException {
         doProcess("addRDF", identifier, filedata);
     }
 
-    public void delete(String identifier) throws TransactionLogException, FileNotFoundException, IOException {
+    public void addTriple(String filedata) throws TransactionLogException, IOException {
+        doProcess("addTriple", "", filedata);
+    }
+
+    public void removeTriple(String filedata) throws TransactionLogException, IOException {
+        doProcess("removeTriple", "", filedata);
+    }
+
+    public void delete(String identifier) throws TransactionLogException, IOException {
         doProcess("delete", identifier, "");
     }
 
@@ -95,6 +106,10 @@ public class TransactionLog {
                 this.tripleStore.addRDF(identifier, filedata);
             } else if (action.equals("delete")) {
                 this.tripleStore.delete(identifier);
+            } else if (action.equals("addTriple")) {
+                this.tripleStore.addTriple(filedata);
+            } else if (action.equals("removeTriple")) {
+                this.tripleStore.removeTriple(filedata);
             }
         } catch (Exception e) {
             throw new TransactionLogException(e);
@@ -105,7 +120,7 @@ public class TransactionLog {
         } catch (Exception e) {
         	rollback();
         	System.err.println(e);
-            throw new Error("Commit on transactionLog failed.");
+            throw new Error("Commit on transactionLog failed.", e);
         }
 
         maybeRotate();
diff --git a/server/src/java/org/meresco/owlimhttpserver/TripleStore.java b/server/src/java/org/meresco/owlimhttpserver/TripleStore.java
index 14aec96..d5e72b8 100644
--- a/server/src/java/org/meresco/owlimhttpserver/TripleStore.java
+++ b/server/src/java/org/meresco/owlimhttpserver/TripleStore.java
@@ -39,8 +39,10 @@ import java.util.List;
 
 public interface TripleStore {
     void addRDF(String identifier, String body);
+    void addTriple(String tripleData);
 
     void delete(String identifier);
+    void removeTriple(String tripleData);
 
     String executeQuery(String sparQL);
     String executeQuery(String sparQL, TupleQueryResultFormat format);
diff --git a/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java b/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
index f25731b..e5d4255 100644
--- a/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
+++ b/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
@@ -165,6 +165,33 @@ public class OwlimHttpHandlerTest {
         assertEquals(Arrays.asList("add:identifier" + "|" + httpBody), tlmock.actions);
     }
 
+    @Test public void testAddTriple() throws TransactionLogException, IOException {
+        TSMock tsmock = new TSMock();
+        TLMock tlmock = new TLMock();
+        OwlimHttpHandler h = new OwlimHttpHandler(tlmock, tsmock);
+        String httpBody = "uri:subj|uri:pred|uri:obj";
+        h.addTriple(httpBody);
+        assertEquals(Arrays.asList("addTriple:uri:subj|uri:pred|uri:obj"), tlmock.actions);
+    }
+
+    @Test public void testAddTripleWithStringAsObject() throws TransactionLogException, IOException {
+        TSMock tsmock = new TSMock();
+        TLMock tlmock = new TLMock();
+        OwlimHttpHandler h = new OwlimHttpHandler(tlmock, tsmock);
+        String httpBody = "uri:subj|uri:pred|string";
+        h.addTriple(httpBody);
+        assertEquals(Arrays.asList("addTriple:uri:subj|uri:pred|string"), tlmock.actions);
+    }
+
+    @Test public void testRemoveTriple() throws TransactionLogException, IOException {
+        TSMock tsmock = new TSMock();
+        TLMock tlmock = new TLMock();
+        OwlimHttpHandler h = new OwlimHttpHandler(tlmock, tsmock);
+        String httpBody = "uri:subj|uri:pred|string";
+        h.removeTriple(httpBody);
+        assertEquals(Arrays.asList("removeTriple:uri:subj|uri:pred|string"), tlmock.actions);
+    }
+
     @Test public void testDeleteRDF() throws TransactionLogException, IOException {
         TSMock tsmock = new TSMock();
         TLMock tlmock = new TLMock();
diff --git a/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java b/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
index dec056b..48b08f6 100644
--- a/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
+++ b/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
@@ -103,6 +103,15 @@ public class OwlimTripleStoreTest {
     }
 
     @Test
+    public void testAddRemoveTriple() throws Exception {
+        long startingPoint = ts.size();
+        ts.addTriple("uri:subj|uri:pred|uri:obj");
+        assertEquals(startingPoint + 1, ts.size());
+        ts.removeTriple("uri:subj|uri:pred|uri:obj");
+        assertEquals(startingPoint, ts.size());
+    }
+
+    @Test
     public void testDelete() throws Exception {
         ts.addRDF("uri:id0", rdf);
         long startingPoint = ts.size();
diff --git a/server/src/test/org/meresco/owlimhttpserver/TLMock.java b/server/src/test/org/meresco/owlimhttpserver/TLMock.java
index 7e48c31..d9928d7 100644
--- a/server/src/test/org/meresco/owlimhttpserver/TLMock.java
+++ b/server/src/test/org/meresco/owlimhttpserver/TLMock.java
@@ -28,6 +28,9 @@ package org.meresco.owlimhttpserver;
 
 import java.util.List;
 import java.util.ArrayList;
+import org.openrdf.model.URI;
+import org.openrdf.model.Resource;
+import org.openrdf.model.Value;
 
 public class TLMock extends TransactionLog {
     public List<String> actions = new ArrayList<String>();
@@ -39,5 +42,13 @@ public class TLMock extends TransactionLog {
     public void delete(String identifier) {
         actions.add("delete:" + identifier);
     }
+
+    public void addTriple(String filedata) {
+        actions.add("addTriple:" + filedata);
+    }
+
+    public void removeTriple(String filedata) {
+        actions.add("removeTriple:" + filedata);
+    }
 }
 
diff --git a/server/src/test/org/meresco/owlimhttpserver/TSMock.java b/server/src/test/org/meresco/owlimhttpserver/TSMock.java
index e6efcdc..df8a5f5 100644
--- a/server/src/test/org/meresco/owlimhttpserver/TSMock.java
+++ b/server/src/test/org/meresco/owlimhttpserver/TSMock.java
@@ -46,10 +46,18 @@ public class TSMock implements TripleStore {
         actions.add("add:" + identifier + "|" + data);
     }
 
+    public void addTriple(String tripleData) {
+        actions.add("addTriple:" + tripleData);
+    }
+
     public void delete(String identifier) {
         actions.add("delete:" + identifier);
     }
 
+    public void removeTriple(String tripleData) {
+        actions.add("removeTriple:" + tripleData);
+    }
+
     public String executeQuery(String sparQL, TupleQueryResultFormat resultFormat) {
         actions.add("executeQuery:" + sparQL);
         return "<result/>";
diff --git a/server/src/test/org/meresco/owlimhttpserver/TransactionLogTest.java b/server/src/test/org/meresco/owlimhttpserver/TransactionLogTest.java
index 61f2fa1..34630a2 100644
--- a/server/src/test/org/meresco/owlimhttpserver/TransactionLogTest.java
+++ b/server/src/test/org/meresco/owlimhttpserver/TransactionLogTest.java
@@ -156,6 +156,56 @@ public class TransactionLogTest {
     }
 
     @Test
+    public void testAddTriple() throws Exception {
+        final ArrayList<String> calls = new ArrayList<String>();
+        class MyTripleStore extends OwlimTripleStore {
+            public void addTriple(String body) {
+                calls.add("addTriple");
+            }
+        }
+        TransactionLog transactionLog = new TransactionLog(new MyTripleStore(), tempdir);
+        transactionLog.init();
+        
+        transactionLog.addTriple("uri:subj|uri:pred|uri:subj");
+        ArrayList<String> files = transactionLog.getTransactionItemFiles();
+        assertEquals(1, files.size());
+        String expectedXml = "<transaction_item>" +
+                "<action>addTriple</action>" +
+                "<identifier></identifier>" + 
+                "<filedata>uri:subj|uri:pred|uri:subj</filedata>" +
+            "</transaction_item>\n";
+        assertEquals(1, calls.size());
+        FileInputStream fileInputStream = new FileInputStream(new File(transactionLog.getTransactionLogDir(), files.get(0)));
+        assertEquals(expectedXml, Utils.read(fileInputStream));
+        assertEquals(expectedXml.length(), new File(transactionLog.getTransactionLogDir(), files.get(0)).length());
+    }
+
+    @Test
+    public void testRemoveTriple() throws Exception {
+        final ArrayList<String> calls = new ArrayList<String>();
+        class MyTripleStore extends OwlimTripleStore {
+            public void removeTriple(String body) {
+                calls.add("removeTriple");
+            }
+        }
+        TransactionLog transactionLog = new TransactionLog(new MyTripleStore(), tempdir);
+        transactionLog.init();
+        
+        transactionLog.removeTriple("uri:subj|uri:pred|uri:subj");
+        ArrayList<String> files = transactionLog.getTransactionItemFiles();
+        assertEquals(1, files.size());
+        String expectedXml = "<transaction_item>" +
+                "<action>removeTriple</action>" +
+                "<identifier></identifier>" + 
+                "<filedata>uri:subj|uri:pred|uri:subj</filedata>" +
+            "</transaction_item>\n";
+        assertEquals(1, calls.size());
+        FileInputStream fileInputStream = new FileInputStream(new File(transactionLog.getTransactionLogDir(), files.get(0)));
+        assertEquals(expectedXml, Utils.read(fileInputStream));
+        assertEquals(expectedXml.length(), new File(transactionLog.getTransactionLogDir(), files.get(0)).length());
+    }
+
+    @Test
     public void testAddNotWhenFailed() throws IOException {
         class MyTripleStore extends OwlimTripleStore {
             public void addRDF(String identifier, String body) {
diff --git a/test/client/httpclienttest.py b/test/client/httpclienttest.py
index 24c0c44..d0ae96e 100644
--- a/test/client/httpclienttest.py
+++ b/test/client/httpclienttest.py
@@ -36,18 +36,32 @@ from meresco.owlim import HttpClient, InvalidRdfXmlException, Uri, Literal
 class HttpClientTest(SeecrTestCase):
     def testAdd(self):
         client = HttpClient(host="localhost", port=9999)
-        g = compose(client.add(identifier="id", partname="ignored", data=rdfData))
+        g = compose(client.add(identifier="id", partname="ignored", data=RDFDATA))
         self._resultFromServerResponse(g, "SOME RESPONSE")
 
-        g = compose(client.add(identifier="id", partname="ignored", data=rdfData))
+        g = compose(client.add(identifier="id", partname="ignored", data=RDFDATA))
         self.assertRaises(
             IOError, 
             lambda: self._resultFromServerResponse(g, "Error description", responseStatus='500'))
 
         toSend = []
         client._send = lambda path, body: toSend.append((path, body))
-        list(compose(client.add(identifier="id", partname="ignored", data=rdfData)))
-        self.assertEquals([("/update?identifier=id", rdfData)], toSend)
+        list(compose(client.add(identifier="id", partname="ignored", data=RDFDATA)))
+        self.assertEquals([("/update?identifier=id", RDFDATA)], toSend)
+
+    def testAddTriple(self):
+        client = HttpClient(host="localhost", port=9999)
+        toSend = []
+        client._send = lambda path, body: toSend.append((path, body))
+        list(compose(client.addTriple(subj="uri:subj", pred="uri:pred", obj="uri:obj")))
+        self.assertEquals([("/addTriple", 'uri:subj|uri:pred|uri:obj')], toSend)
+
+    def testRemoveTriple(self):
+        client = HttpClient(host="localhost", port=9999)
+        toSend = []
+        client._send = lambda path, body: toSend.append((path, body))
+        list(compose(client.removeTriple(subj="uri:subj", pred="uri:pred", obj="uri:obj")))
+        self.assertEquals([("/removeTriple", 'uri:subj|uri:pred|uri:obj')], toSend)
 
     def testDelete(self):
         client = HttpClient(host="localhost", port=9999)
@@ -66,10 +80,10 @@ class HttpClientTest(SeecrTestCase):
 
     def testValidate(self):
         client = HttpClient(host="localhost", port=9999)
-        g = compose(client.validate(data=rdfData))
+        g = compose(client.validate(data=RDFDATA))
         self._resultFromServerResponse(g, "Ok")
 
-        g = compose(client.validate(data=rdfData))
+        g = compose(client.validate(data=RDFDATA))
         try:
             self._resultFromServerResponse(g, "Invalid\nError description")
             self.fail("should not get here.")
@@ -81,8 +95,8 @@ class HttpClientTest(SeecrTestCase):
             toSend.append((path, body))
             raise StopIteration('header', 'body')
         client._send = mockSend
-        list(compose(client.validate(data=rdfData)))
-        self.assertEquals([("/validate", rdfData)], toSend)
+        list(compose(client.validate(data=RDFDATA)))
+        self.assertEquals([("/validate", RDFDATA)], toSend)
 
     def testCreateSparQL(self):
         client = HttpClient(host="localhost", port=9999)
@@ -92,6 +106,9 @@ class HttpClientTest(SeecrTestCase):
         
         self.assertEquals("SELECT DISTINCT ?o WHERE { <http://cq2.org/person/0001> <http://xmlns.com/foaf/0.1/name> ?o }", client._createSparQL(subj="http://cq2.org/person/0001", pred="http://xmlns.com/foaf/0.1/name"))
 
+        self.assertEquals("SELECT DISTINCT * WHERE { <http://cq2.org/person/0001> <http://xmlns.com/foaf/0.1/name> \"object\" }", client._createSparQL(subj="http://cq2.org/person/0001", pred="http://xmlns.com/foaf/0.1/name", obj="object"))
+
+
     def testExecuteQuery(self):
         client = HttpClient(host="localhost", port=9999)
         gen = compose(client.executeQuery('SPARQL'))
@@ -144,17 +161,17 @@ class HttpClientTest(SeecrTestCase):
     def testAddSynchronous(self):
         client = HttpClient(host="localhost", port=9999, synchronous=True)
         client._urlopen = lambda *args, **kwargs: "SOME RESPONSE"
-        list(compose(client.add(identifier="id", partname="ignored", data=rdfData)))
+        list(compose(client.add(identifier="id", partname="ignored", data=RDFDATA)))
 
-        # list(compose(client.add(identifier="id", partname="ignored", data=rdfData)))
+        # list(compose(client.add(identifier="id", partname="ignored", data=RDFDATA)))
         # self.assertRaises(
         #     IOError, 
         #     lambda: self._resultFromServerResponse(g, "Error description", responseStatus='500'))
 
         toSend = []
         client._urlopen = lambda url, data: toSend.append((url, data))
-        list(compose(client.add(identifier="id", partname="ignored", data=rdfData)))
-        self.assertEquals([("http://localhost:9999/update?identifier=id", rdfData)], toSend)
+        list(compose(client.add(identifier="id", partname="ignored", data=RDFDATA)))
+        self.assertEquals([("http://localhost:9999/update?identifier=id", RDFDATA)], toSend)
 
     def _resultFromServerResponse(self, g, data, responseStatus='200'):
         s = g.next()
@@ -216,4 +233,4 @@ RESULT_JSON = """{
         }
 }"""
 
-rdfData = "<rdf>should be RDF</rdf>"
+RDFDATA = "<rdf>should be RDF</rdf>"
-- 
1.7.2.5


From bfae5e5323b9fa155ad34ab62b228b0e0143e34a Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Mon, 24 Dec 2012 17:02:49 +0100
Subject: [PATCH 02/10] HM/JPM: fixed getStatements

---
 client/deps.txt                                    |    2 ++
 client/meresco/owlim/httpclient.py                 |   12 +++++++-----
 .../meresco/owlimhttpserver/OwlimTripleStore.java  |    1 +
 test/client/httpclienttest.py                      |    2 ++
 4 files changed, 12 insertions(+), 5 deletions(-)

diff --git a/client/deps.txt b/client/deps.txt
index eeecfdd..4f1c0fe 100644
--- a/client/deps.txt
+++ b/client/deps.txt
@@ -2,3 +2,5 @@ python-meresco-core (>= 4.0)
 python-meresco-core (<< 4.1)
 python-simplejson (>= 2.1.1)
 python-simplejson (<< 2.2)
+python-4suite-xml (>=1.0.2)
+python-4suite-xml (<<1.0.3)
\ No newline at end of file
diff --git a/client/meresco/owlim/httpclient.py b/client/meresco/owlim/httpclient.py
index 490f059..41b79e9 100644
--- a/client/meresco/owlim/httpclient.py
+++ b/client/meresco/owlim/httpclient.py
@@ -120,13 +120,15 @@ class HttpClient(object):
             statement += " *"
         statement += " WHERE {"
 
-        if subj and subj[0] != '<' and subj[-1] != '>':
+        if subj:
             subj = '<%s>' % subj
-        if pred and pred[0] != '<' and pred[-1] != '>':
+        if pred:
             pred = '<%s>' % pred
-
-        if obj and not FtUri.MatchesUriSyntax(obj):
-            obj = '"%s"' % obj
+        if obj:
+            if FtUri.MatchesUriSyntax(obj):
+                obj = '<%s>' % obj
+            else:
+                obj = '"%s"' % obj
 
         statement += " " + subj if subj else " ?s"
         statement += " " + pred if pred else " ?p"
diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java b/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
index c30fb5f..a917e40 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
@@ -196,6 +196,7 @@ public class OwlimTripleStore implements TripleStore {
             } catch (QueryEvaluationException e) {
                 throw new RuntimeException(e);
             } catch (MalformedQueryException e) {
+                System.err.println("Bad SparQL: " + sparQL);
                 throw new RuntimeException(e);
             } catch (IOException e) {
                 throw new RuntimeException(e);
diff --git a/test/client/httpclienttest.py b/test/client/httpclienttest.py
index d0ae96e..f24c96f 100644
--- a/test/client/httpclienttest.py
+++ b/test/client/httpclienttest.py
@@ -106,6 +106,8 @@ class HttpClientTest(SeecrTestCase):
         
         self.assertEquals("SELECT DISTINCT ?o WHERE { <http://cq2.org/person/0001> <http://xmlns.com/foaf/0.1/name> ?o }", client._createSparQL(subj="http://cq2.org/person/0001", pred="http://xmlns.com/foaf/0.1/name"))
 
+        self.assertEquals("SELECT DISTINCT * WHERE { <http://cq2.org/person/0001> <http://xmlns.com/foaf/0.1/name> <uri:obj> }", client._createSparQL(subj="http://cq2.org/person/0001", pred="http://xmlns.com/foaf/0.1/name", obj="uri:obj"))
+        
         self.assertEquals("SELECT DISTINCT * WHERE { <http://cq2.org/person/0001> <http://xmlns.com/foaf/0.1/name> \"object\" }", client._createSparQL(subj="http://cq2.org/person/0001", pred="http://xmlns.com/foaf/0.1/name", obj="object"))
 
 
-- 
1.7.2.5


From 17d3ec1c74b38d682c1aa50e6c96df10c6e051db Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 27 Dec 2012 14:32:00 +0100
Subject: [PATCH 03/10] TS/JPM: fixed 'removeTriple' (with new test + some cleaning up)

---
 .../meresco/owlimhttpserver/OwlimHttpHandler.java  |    3 +
 test/integration/integrationtestcase.py            |    2 +-
 test/integration/owlimtest.py                      |   33 ++++--
 test/integration/utils.py                          |  134 --------------------
 4 files changed, 28 insertions(+), 144 deletions(-)
 delete mode 100644 test/integration/utils.py

diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
index 61aa49c..e44d647 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
@@ -85,6 +85,9 @@ public class OwlimHttpHandler implements HttpHandler {
                 } else if (path.equals("/addTriple")) {
                     String body = Utils.read(exchange.getRequestBody());
                     addTriple(body);
+                } else if (path.equals("/removeTriple")) {
+                    String body = Utils.read(exchange.getRequestBody());
+                    removeTriple(body);
                 } else if (path.equals("/query")) {
                     String response = "";
                     Headers requestHeaders = exchange.getRequestHeaders();
diff --git a/test/integration/integrationtestcase.py b/test/integration/integrationtestcase.py
index 54811b3..f6654f0 100644
--- a/test/integration/integrationtestcase.py
+++ b/test/integration/integrationtestcase.py
@@ -44,7 +44,7 @@ from lxml.etree import XMLSyntaxError, parse
 from seecr.test import SeecrTestCase
 from meresco.components import readConfig
 
-from utils import postRequest, postMultipartForm 
+from seecr.test.utils import postRequest, postMultipartForm 
 
 
 mypath = dirname(abspath(__file__))
diff --git a/test/integration/owlimtest.py b/test/integration/owlimtest.py
index 347f0e1..44b49a5 100644
--- a/test/integration/owlimtest.py
+++ b/test/integration/owlimtest.py
@@ -24,29 +24,24 @@
 # 
 ## end license ##
 
-from integration import IntegrationTestCase
-from utils import postRequest
-
 from shutil import rmtree, copyfile
 from os.path import join, exists, abspath, isdir
 from os import remove, kill, waitpid, WNOHANG, system, symlink
 from simplejson import loads
 from urllib import urlopen, urlencode
+from urllib2 import urlopen, Request
 from signal import SIGKILL
 from time import time
 
-from urllib2 import urlopen, Request
+from seecr.test.utils import getRequest, postRequest
+
+from integration import IntegrationTestCase
 
-from seecr.test.utils import getRequest
 
 class OwlimTest(IntegrationTestCase):
     def testOne(self):
         self.assertTrue('"vars": [ "x" ]' in urlopen("http://localhost:%s/query?%s" % (self.owlimPort, urlencode(dict(query='SELECT ?x WHERE {}')))).read())
 
-    def query(self, query):
-        return loads(urlopen('http://localhost:%s/query?%s' % (self.owlimPort,
-            urlencode(dict(query=query)))).read())
-
     def testKillTripleStoreSavesState(self):
         postRequest(self.owlimPort, "/add?identifier=uri:record", """<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
         <rdf:Description>
@@ -134,6 +129,21 @@ class OwlimTest(IntegrationTestCase):
         json = self.query('SELECT ?x WHERE {?x ?y "uri:testDelete"}')
         self.assertEquals(1, len(json['results']['bindings']))
 
+    def testAddAndRemoveTriple(self):
+        json = self.query('SELECT ?obj WHERE { <uri:subject> <uri:predicate> ?obj }')
+        self.assertEquals(0, len(json['results']['bindings']))
+
+        header, body = postRequest(self.owlimPort, "/addTriple", "uri:subject|uri:predicate|uri:object", parse=False)
+        self.assertTrue("200" in header, header)
+
+        json = self.query('SELECT ?obj WHERE { <uri:subject> <uri:predicate> ?obj }')
+        self.assertEquals(1, len(json['results']['bindings']))
+
+        header, body = postRequest(self.owlimPort, "/removeTriple", "uri:subject|uri:predicate|uri:object", parse=False)
+        self.assertTrue("200" in header, header)
+        json = self.query('SELECT ?obj WHERE { <uri:subject> <uri:predicate> ?obj }')
+        self.assertEquals(0, len(json['results']['bindings']))
+
     def testPerformance(self):
         totalTime = 0
         for i in range(10):
@@ -238,3 +248,8 @@ class OwlimTest(IntegrationTestCase):
         </result>
     </results>
 </sparql>""", contents)   
+
+    def query(self, query):
+        return loads(urlopen('http://localhost:%s/query?%s' % (self.owlimPort,
+            urlencode(dict(query=query)))).read())
+
diff --git a/test/integration/utils.py b/test/integration/utils.py
deleted file mode 100644
index 9a2d2ad..0000000
--- a/test/integration/utils.py
+++ /dev/null
@@ -1,134 +0,0 @@
-## begin license ##
-# 
-# The Meresco Owlim package consists out of a HTTP server written in Java that
-# provides access to an Owlim Triple store, as well as python bindings to
-# communicate as a client with the server. 
-# 
-# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
-# 
-# This file is part of "Meresco Owlim"
-# 
-# "Meresco Owlim" is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-# 
-# "Meresco Owlim" is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-# 
-# You should have received a copy of the GNU General Public License
-# along with "Meresco Owlim"; if not, write to the Free Software
-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-# 
-## end license ##
-
-from amara.binderytools import bind_string
-from lxml.etree import parse as parse_lxml
-from StringIO import StringIO
-from socket import socket
-from urllib import urlencode
-from cq2utils.wrappers import wrapp
-from sys import stdout
-
-
-def _socket(port, timeOutInSeconds):
-    sok = socket()
-    sok.connect(('localhost', port))
-    sok.settimeout(5.0 if timeOutInSeconds is None else timeOutInSeconds)
-    return sok
-
-def createReturnValue(header, body, parse):
-    if parse == True:
-        try:
-            body = wrapp(bind_string(body))
-        except:
-            print body
-            raise
-    elif parse == 'lxml':
-        body = parse_lxml(StringIO(body))
-    return header, body
-
-
-def postRequest(port, path, data, contentType='text/xml; charset="utf-8"', parse=True, timeOutInSeconds=None):
-    sok = _socket(port, timeOutInSeconds)
-    try:
-        contentLength = len(data)
-        sendBuffer = '\r\n'.join([
-            'POST %(path)s HTTP/1.0',
-            'Content-Type: %s' % contentType,
-            'Content-Length: %(contentLength)s',
-            '', '']) % locals()
-        sendBuffer += data
-
-        totalBytesSent = 0
-        bytesSent = 0
-        while totalBytesSent != len(sendBuffer):
-            bytesSent = sok.send(sendBuffer[totalBytesSent:])
-            totalBytesSent += bytesSent
-
-        header, body = receiveFromSocket(sok)
-        return createReturnValue(header, body, parse)
-    finally:
-        sok.close()
-
-def postMultipartForm(port, path, formValues, parse=True, timeOutInSeconds=None):
-    boundary = '-=-=-=-=-=-=-=-=TestBoundary1234567890'
-    body = createPostMultipartForm(boundary, formValues)
-    return postRequest(port, path, body, contentType='multipart/form-data; boundary=' + boundary, parse=parse, timeOutInSeconds=timeOutInSeconds)
-
-def createPostMultipartForm(boundary, formValues):
-    strm = StringIO()
-    for valueDict in formValues:
-        fieldType = valueDict['type']
-        headers = {}
-        headers['Content-Disposition'] = 'form-data; name="%(name)s"' % valueDict
-        if fieldType == 'file':
-            headers['Content-Disposition'] = headers['Content-Disposition'] + '; filename="%(filename)s"' % valueDict
-            headers['Content-Type'] = valueDict['mimetype']
-
-        strm.write('--' + boundary + '\r\n')
-        for item in headers.items():
-            strm.write('%s: %s\r\n' % item)
-        strm.write('\r\n')
-        strm.write(valueDict['value'])
-        strm.write('\r\n')
-    strm.write('--' + boundary + '--\r\n')
-
-    return strm.getvalue()
-
-def getRequest(port, path, arguments, parse=True, timeOutInSeconds=None, host=None, additionalHeaders=None):
-    sok = _socket(port, timeOutInSeconds)
-    try:
-        requestString = path
-        if arguments:
-            requestString = path + '?' + urlencode(arguments, doseq=True)
-
-        request = 'GET %(requestString)s HTTP/1.0\r\n' % locals()
-        if host != None:
-            request = 'GET %(requestString)s HTTP/1.1\r\nHost: %(host)s\r\n' % locals()
-        if additionalHeaders != None:
-            for header in additionalHeaders.items():
-                request += '%s: %s\r\n' % header
-        request += '\r\n'
-
-        sok.send(request)
-
-        header, body = receiveFromSocket(sok)
-        return createReturnValue(header, body, parse)
-    finally:
-        sok.close()
-
-
-def receiveFromSocket(sok):
-    response = ''
-    part = sok.recv(1024)
-    response += part
-    while part != None:
-        part = sok.recv(1024)
-        if not part:
-            break
-        response += part
-    return response.split('\r\n\r\n', 1)
-
-- 
1.7.2.5


From 20120612730650748c432430a594db1d0157ac24 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 27 Dec 2012 14:59:38 +0100
Subject: [PATCH 04/10] TS/JPM: adapted to seecr.test.integrationtestcase

---
 test-deps.txt                             |    4 +-
 test/_integrationtest.py                  |   15 ++--
 test/integration/__init__.py              |    1 -
 test/integration/integrationtestcase.py   |  165 -----------------------------
 test/integration/owlimintegrationstate.py |   35 ++++++
 test/integration/owlimtest.py             |    3 +-
 6 files changed, 46 insertions(+), 177 deletions(-)
 delete mode 100644 test/integration/integrationtestcase.py
 create mode 100644 test/integration/owlimintegrationstate.py

diff --git a/test-deps.txt b/test-deps.txt
index b06a429..f79f675 100644
--- a/test-deps.txt
+++ b/test-deps.txt
@@ -1,5 +1,5 @@
-seecr-test (>= 1.1)
-seecr-test (<< 1.2)
+seecr-test (>= 1.2.26)
+seecr-test (<< 1.3)
 meresco-components (>= 4.0)
 meresco-components (<< 4.1)
 junit4
diff --git a/test/_integrationtest.py b/test/_integrationtest.py
index c33ebc7..0de1fa3 100644
--- a/test/_integrationtest.py
+++ b/test/_integrationtest.py
@@ -36,24 +36,25 @@ systemPath.insert(0, '../client')                   #DO_NOT_DISTRIBUTE
 
 from sys import argv
 
-from testrunner import TestRunner
+from seecr.test.testrunner import TestRunner
 
-from integration import globalSetUp, globalTearDown
+from integration.owlimintegrationstate import OwlimIntegrationState
 
-flags = ['--fast']
 
 if __name__ == '__main__':
+    flags = ['--fast']
     fastMode = '--fast' in argv
     for flag in flags:
         if flag in argv:
             argv.remove(flag)
 
     runner = TestRunner()
-    runner.addGroup('default', [
-            'integration.owlimtest.OwlimTest',
+    OwlimIntegrationState(
+        'default',
+        tests=[
+            'integration.owlimtest.OwlimTest'
         ],
-        groupSetUp = lambda: globalSetUp(fastMode, 'default'),
-        groupTearDown = lambda: globalTearDown())
+        fastMode=fastMode).addToTestRunner(runner)
 
     testnames = argv[1:]
     runner.run(testnames)
diff --git a/test/integration/__init__.py b/test/integration/__init__.py
index 0721290..838ca56 100644
--- a/test/integration/__init__.py
+++ b/test/integration/__init__.py
@@ -24,4 +24,3 @@
 # 
 ## end license ##
 
-from integrationtestcase import globalSetUp, globalTearDown, IntegrationTestCase
diff --git a/test/integration/integrationtestcase.py b/test/integration/integrationtestcase.py
deleted file mode 100644
index f6654f0..0000000
--- a/test/integration/integrationtestcase.py
+++ /dev/null
@@ -1,165 +0,0 @@
-## begin license ##
-# 
-# The Meresco Owlim package consists out of a HTTP server written in Java that
-# provides access to an Owlim Triple store, as well as python bindings to
-# communicate as a client with the server. 
-# 
-# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
-# 
-# This file is part of "Meresco Owlim"
-# 
-# "Meresco Owlim" is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-# 
-# "Meresco Owlim" is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-# 
-# You should have received a copy of the GNU General Public License
-# along with "Meresco Owlim"; if not, write to the Free Software
-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-# 
-## end license ##
-
-from __future__ import with_statement
-
-from os.path import isdir, join, abspath, dirname, basename
-from os import system, listdir
-from sys import stdout
-from random import randint, choice
-from time import sleep, time 
-from hashlib import md5
-from StringIO import StringIO
-from subprocess import Popen
-from signal import SIGTERM
-from os import waitpid, kill, WNOHANG
-from urllib import urlopen, urlencode
-from re import DOTALL, compile
-from traceback import print_exc
-from lxml.etree import XMLSyntaxError, parse
-
-from seecr.test import SeecrTestCase
-from meresco.components import readConfig
-
-from seecr.test.utils import postRequest, postMultipartForm 
-
-
-mypath = dirname(abspath(__file__))
-binDir = join(dirname(dirname(mypath)), 'server', 'bin')
-
-def stdoutWrite(aString):
-    stdout.write(aString)
-    stdout.flush()
-
-class PortNumberGenerator(object):
-    startNumber = randint(50000, 60000)
-
-    @classmethod
-    def next(cls):
-        cls.startNumber += 1
-        return cls.startNumber
-
-scriptTagRegex = compile("<script[\s>].*?</script>", DOTALL)
-
-
-class IntegrationTestCase(SeecrTestCase):
-    def setUp(self):
-        SeecrTestCase.setUp(self)
-        global state
-        self.state = state
-
-    def __getattr__(self, name):
-        if name.startswith('_'):
-            raise AttributeError(name)
-        return getattr(self.state, name)
-
-    def parseHtmlAsXml(self, body):
-        def forceXml(body):
-            newBody = body 
-            newBody = newBody.replace("&nbsp;", " ") 
-            newBody = newBody.replace("&ndash;", "&#8211;")
-            newBody = newBody.replace("&mdash;", "&#8212;")
-            newBody = scriptTagRegex.sub('', newBody)
-            return newBody
-        try: 
-            return parse(StringIO(forceXml(body)))
-        except XMLSyntaxError:
-            print body 
-            raise
-
-
-class IntegrationState(object):
-    def __init__(self, stateName, fastMode):
-        self.stateName = stateName
-        self.pids = {}
-        self.integrationTempdir = '/tmp/integrationtest-owlim-%s' % stateName 
-        self.owlimDataDir = join(self.integrationTempdir, 'owlim-data')
-        self.testdataDir = join(dirname(mypath), 'data')
-        if not fastMode:
-            system('rm -rf ' + self.integrationTempdir)
-            system('mkdir --parents ' + self.owlimDataDir)
-        
-        self.owlimPort = PortNumberGenerator.next()
-
-    def initialize(self):
-        self.startOwlimServer()
-            
-    def _startServer(self, serviceName, binScript, serviceReadyUrl, redirect=True, **kwargs):
-        stdoutfile = join(self.integrationTempdir, "stdouterr-%s.log" % serviceName)
-        stdouterrlog = open(stdoutfile, 'w')
-        args = [join(binDir, binScript)]
-        fileno = stdouterrlog.fileno() if redirect else None
-        for k,v in kwargs.items():
-            args.append("--%s" % k)
-            args.append(str(v))
-        args += ["--name", serviceName]
-        serverProcess = Popen(
-                args=args,
-                cwd=binDir,
-                stdout=fileno,
-                stderr=fileno)
-        self.pids[serviceName] = serverProcess.pid
-
-        stdoutWrite("Starting service '%s', for state '%s' : v" % (serviceName, self.stateName))
-        done = False
-        while not done:
-            try:
-                stdoutWrite('r')
-                sleep(0.1)
-                urlopen(serviceReadyUrl).read()
-                done = True
-            except IOError:
-                if serverProcess.poll() != None:
-                    del self.pids[serviceName]
-                    exit('Service "%s" died, check "%s"' % (serviceName, stdoutfile))
-        stdoutWrite('oom!\n')
-
-    def _stopServer(self, serviceName):
-        kill(self.pids[serviceName], SIGTERM)
-        waitpid(self.pids[serviceName], WNOHANG)
-
-    def restartOwlimServer(self):
-        self._stopServer('owlim')
-        self.startOwlimServer()
-
-    def startOwlimServer(self):
-        self._startServer('owlim', 'start-owlim', 'http://localhost:%s/query' % self.owlimPort, port=self.owlimPort, stateDir=self.owlimDataDir)
-
-    def tearDown(self):
-        for serviceName in self.pids.keys():
-            self._stopServer(serviceName)
-
-
-def globalSetUp(fast, stateName):
-    global state, fastMode
-    fastMode = fast
-    state = IntegrationState(stateName, fastMode)
-    state.initialize()
-
-def globalTearDown():
-    global state
-    state.tearDown()
-
diff --git a/test/integration/owlimintegrationstate.py b/test/integration/owlimintegrationstate.py
new file mode 100644
index 0000000..6e32315
--- /dev/null
+++ b/test/integration/owlimintegrationstate.py
@@ -0,0 +1,35 @@
+from os import system
+from os.path import join, dirname, abspath
+
+from seecr.test.integrationtestcase import IntegrationState
+from seecr.test.portnumbergenerator import PortNumberGenerator
+
+
+myDir = dirname(abspath(__file__))
+serverBinDir = join(dirname(dirname(myDir)), 'server/bin')
+print serverBinDir
+
+class OwlimIntegrationState(IntegrationState):
+    def __init__(self, stateName, tests=None, fastMode=False):
+        IntegrationState.__init__(self, stateName=stateName, tests=tests, fastMode=fastMode)
+
+        self.owlimDataDir = join(self.integrationTempdir, 'owlim-data')
+        self.owlimPort = PortNumberGenerator.next()
+        self.testdataDir = join(dirname(myDir), 'data')
+        if not fastMode:
+            system('rm -rf ' + self.integrationTempdir)
+            system('mkdir --parents ' + self.owlimDataDir)
+        
+    def setUp(self):
+        self.startOwlimServer()
+
+    def binDir(self):
+        return serverBinDir
+
+    def startOwlimServer(self):
+        self._startServer('owlim', self.binPath('start-owlim'), 'http://localhost:%s/query' % self.owlimPort, port=self.owlimPort, stateDir=self.owlimDataDir, name='owlim')
+
+    def restartOwlimServer(self):
+        self._stopServer('owlim')
+        self.startOwlimServer()
+
diff --git a/test/integration/owlimtest.py b/test/integration/owlimtest.py
index 44b49a5..822ced3 100644
--- a/test/integration/owlimtest.py
+++ b/test/integration/owlimtest.py
@@ -34,8 +34,7 @@ from signal import SIGKILL
 from time import time
 
 from seecr.test.utils import getRequest, postRequest
-
-from integration import IntegrationTestCase
+from seecr.test.integrationtestcase import IntegrationTestCase
 
 
 class OwlimTest(IntegrationTestCase):
-- 
1.7.2.5


From b07d2fed54fdeef075feef283b34e9ca5615a5a3 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 27 Dec 2012 17:12:33 +0100
Subject: [PATCH 05/10] TS/JPM: added guards (Uri checks) to getStatements + some refactorings (API incompatible)

---
 client/meresco/owlim/httpclient.py |  116 ++++++++++++++++++------------------
 client/meresco/owlim/literal.py    |   15 +++--
 client/meresco/owlim/uri.py        |   19 +++++-
 test/client/httpclienttest.py      |   44 +++++---------
 4 files changed, 96 insertions(+), 98 deletions(-)

diff --git a/client/meresco/owlim/httpclient.py b/client/meresco/owlim/httpclient.py
index 41b79e9..1dc1ce0 100644
--- a/client/meresco/owlim/httpclient.py
+++ b/client/meresco/owlim/httpclient.py
@@ -29,7 +29,6 @@
 from urllib2 import urlopen
 from urllib import urlencode
 from simplejson import loads
-from Ft.Xml.Lib import Uri as FtUri 
 
 from weightless.http import httpget, httppost
 
@@ -52,11 +51,11 @@ class HttpClient(object):
         path = "/update?%s" % urlencode(dict(identifier=identifier))
         yield self._send(path=path, body=data)
 
-    def addTriple(self, subj, pred, obj):
-        yield self._send(path="/addTriple", body='|'.join([subj, pred, obj]))
+    def addTriple(self, subject, predicate, object):
+        yield self._send(path="/addTriple", body='|'.join([subject, predicate, object]))
 
-    def removeTriple(self, subj, pred, obj):
-        yield self._send(path="/removeTriple", body='|'.join([subj, pred, obj]))
+    def removeTriple(self, subject, predicate, object):
+        yield self._send(path="/removeTriple", body='|'.join([subject, predicate, object]))
 
     def delete(self, identifier, **kwargs):
         path = "/delete?%s" % urlencode(dict(identifier=identifier))
@@ -71,13 +70,13 @@ class HttpClient(object):
     def executeQuery(self, query, queryResultFormat=None):
         queryResult = yield self._sparqlQuery(query, queryResultFormat=queryResultFormat)
         if queryResultFormat is None:
-            queryResult = _parseJson2Dict(queryResult)
+            queryResult = self._parseJson2Dict(queryResult)
         raise StopIteration(queryResult)
 
-    def getStatements(self, subj=None, pred=None, obj=None):
-        query = self._createSparQL(subj, pred, obj)
+    def getStatements(self, subject=None, predicate=None, object=None):
+        query = ''.join(self._getStatementsSparQL(subject=subject, predicate=predicate, object=object))
         jsonString = yield self._sparqlQuery(query)
-        raise StopIteration(_results(jsonString, subj, pred, obj))
+        raise StopIteration(self._getStatementsResults(jsonString, subject=subject, predicate=predicate, object=object))
 
     def _sparqlQuery(self, query, queryResultFormat=None):
         path = "/query?%s" % urlencode(dict(query=query))
@@ -108,61 +107,60 @@ class HttpClient(object):
         if not header.startswith('HTTP/1.1 200'):
             raise IOError("Expected status '200' from Owlim triplestore, but got: " + response)
 
-    def _createSparQL(self, subj=None, pred=None, obj=None):
-        statement = "SELECT DISTINCT"
-        if subj is None:
-            statement += " ?s"
-        if pred is None:
-            statement += " ?p"
-        if obj is None:
-            statement += " ?o"
-        if (subj and pred and obj):
-            statement += " *"
-        statement += " WHERE {"
-
-        if subj:
-            subj = '<%s>' % subj
-        if pred:
-            pred = '<%s>' % pred
-        if obj:
-            if FtUri.MatchesUriSyntax(obj):
-                obj = '<%s>' % obj
-            else:
-                obj = '"%s"' % obj
-
-        statement += " " + subj if subj else " ?s"
-        statement += " " + pred if pred else " ?p"
-        statement += " " + obj if obj else " ?o"
-
-        statement += " }"
-
-        return statement
+    def _getStatementsSparQL(self, subject=None, predicate=None, object=None):
+        if not subject is None and not Uri.matchesUriSyntax(subject):
+            raise ValueError('subject must be an URI')
+        if not predicate is None and not Uri.matchesUriSyntax(predicate):
+            raise ValueError('predicate must be an URI')
+        yield "SELECT DISTINCT"
+        if subject is None:
+            yield " ?s"
+        if predicate is None:
+            yield " ?p"
+        if object is None:
+            yield " ?o"
+        if (subject and predicate and object):
+            yield " *"
+        yield " WHERE {"
+        yield " " + ('<%s>' % subject if subject else "?s")
+        yield " " + ('<%s>' % predicate if predicate else "?p")
+        yield " " + (['"%s"', '<%s>'][Uri.matchesUriSyntax(object)] % object if object else "?o")
+        yield " }"
+
+    def _parseJson2Dict(self, jsonString):
+        result = []
+        jsonData = loads(jsonString)
+        for binding in jsonData['results']['bindings']:
+            result.append(dict([(key, self._fromBinding(binding, key)) for key in binding.keys()]))
+        return result
+
+    def _getStatementsResults(self, jsonString, subject, predicate, object):
+        jsonData = loads(jsonString)
+        if not subject is None:
+            subject = Uri(subject)
+        if not predicate is None:
+            predicate = Uri(predicate)
+        if not object is None:
+            object = Uri(object) if Uri.matchesUriSyntax(object) else Literal(object)
+        for binding in jsonData['results']['bindings']:
+            resultSubject = self._fromBinding(binding, 's', subject)
+            resultPredicate = self._fromBinding(binding, 'p', predicate)
+            resultObject = self._fromBinding(binding, 'o', object)
+            yield resultSubject, resultPredicate, resultObject
+
+    def _fromBinding(self, binding, key, default=None):
+        valueDict = binding.get(key)
+        if valueDict is None:
+            return default
+        mappedType = _typeMapping.get(valueDict['type'])
+        return mappedType.fromDict(valueDict) if mappedType else valueDict['value']
 
     def _urlopen(self, *args, **kwargs):
         return urlopen(*args, **kwargs).read()
 
-
-def _results(jsonString, subj, pred, obj):
-    jsonData = loads(jsonString)
-    for i in jsonData['results']['bindings']:
-        resultSubject = fromDict(i['s'])  if 's' in i else Uri(subj)
-        resultPredicate = fromDict(i['p'])  if 'p' in i else Uri(pred)
-        resultObject = fromDict(i['o'])  if 'o' in i else Literal(obj)
-        yield resultSubject, resultPredicate, resultObject
-
-typeMapping = {
+    
+_typeMapping = {
     'literal': Literal,
     'uri': Uri,
 }
 
-def fromDict(dictionary):
-    mappedType = typeMapping.get(dictionary['type'], None)
-    return mappedType.fromDict(dictionary) if mappedType else dictionary['value']
-
-def _parseJson2Dict(jsonString):
-    result = []
-    jsonData = loads(jsonString)
-    for i in jsonData['results']['bindings']:
-        result.append(dict([(key, fromDict(value)) for (key, value) in i.items()]))
-    return result
-
diff --git a/client/meresco/owlim/literal.py b/client/meresco/owlim/literal.py
index 508af38..0cae890 100644
--- a/client/meresco/owlim/literal.py
+++ b/client/meresco/owlim/literal.py
@@ -25,16 +25,19 @@
 ## end license ##
 
 class Literal(object):
-
     @classmethod
-    def fromDict(self, aDictionary):
+    def fromDict(self, valueDict):
         return Literal(
-            value=aDictionary['value'], 
-            lang=aDictionary.get('xml:lang', None))
+            value=valueDict['value'], 
+            lang=valueDict.get('xml:lang', None))
 
     def __init__(self, value, lang=None):
-        self.value = value
-        self.lang = lang
+        if isinstance(value, Literal):
+            self.value = value.value
+            self.lang = value.lang
+        else:
+            self.value = value
+            self.lang = lang
 
     def __eq__(self, other):
         return other.__class__ is self.__class__ and self.value == other.value and other.lang == self.lang
diff --git a/client/meresco/owlim/uri.py b/client/meresco/owlim/uri.py
index ce653db..8134b1d 100644
--- a/client/meresco/owlim/uri.py
+++ b/client/meresco/owlim/uri.py
@@ -24,16 +24,27 @@
 # 
 ## end license ##
 
+from Ft.Xml.Lib import Uri as FtUri 
+
 class Uri(str):
     def __init__(self, value):
-        self.value = value
+        if isinstance(value, Uri):
+            self.value = value.value
+        else:
+            self.value = value
 
     @classmethod
-    def fromDict(self, aDictionary):
-        return Uri(aDictionary['value'])
+    def fromDict(self, valueDict):
+        return Uri(valueDict['value'])
 
     def __repr__(self):
-        return "%s(%s)" % (self.__class__.__name__, self.value)
+        return "%s(%s)" % (self.__class__.__name__, repr(self.value))
 
     def __eq__(self, other):
         return other.__class__ is self.__class__ and other.value == self.value
+
+    @staticmethod
+    def matchesUriSyntax(value):
+        # should be replaced by check on the (broader) IRI syntax as supported in RDF. 
+        return FtUri.MatchesUriSyntax(value)
+
diff --git a/test/client/httpclienttest.py b/test/client/httpclienttest.py
index f24c96f..5c3835b 100644
--- a/test/client/httpclienttest.py
+++ b/test/client/httpclienttest.py
@@ -53,14 +53,14 @@ class HttpClientTest(SeecrTestCase):
         client = HttpClient(host="localhost", port=9999)
         toSend = []
         client._send = lambda path, body: toSend.append((path, body))
-        list(compose(client.addTriple(subj="uri:subj", pred="uri:pred", obj="uri:obj")))
+        list(compose(client.addTriple(subject="uri:subj", predicate="uri:pred", object="uri:obj")))
         self.assertEquals([("/addTriple", 'uri:subj|uri:pred|uri:obj')], toSend)
 
     def testRemoveTriple(self):
         client = HttpClient(host="localhost", port=9999)
         toSend = []
         client._send = lambda path, body: toSend.append((path, body))
-        list(compose(client.removeTriple(subj="uri:subj", pred="uri:pred", obj="uri:obj")))
+        list(compose(client.removeTriple(subject="uri:subj", predicate="uri:pred", object="uri:obj")))
         self.assertEquals([("/removeTriple", 'uri:subj|uri:pred|uri:obj')], toSend)
 
     def testDelete(self):
@@ -98,17 +98,17 @@ class HttpClientTest(SeecrTestCase):
         list(compose(client.validate(data=RDFDATA)))
         self.assertEquals([("/validate", RDFDATA)], toSend)
 
-    def testCreateSparQL(self):
+    def testGetStatementsSparQL(self):
         client = HttpClient(host="localhost", port=9999)
-        self.assertEquals("SELECT DISTINCT ?s ?p ?o WHERE { ?s ?p ?o }", client._createSparQL(subj=None, pred=None, obj=None))
+        self.assertEquals("SELECT DISTINCT ?s ?p ?o WHERE { ?s ?p ?o }", ''.join(client._getStatementsSparQL(subject=None, predicate=None, object=None)))
 
-        self.assertEquals("SELECT DISTINCT ?p ?o WHERE { <http://cq2.org/person/0001> ?p ?o }", client._createSparQL(subj="http://cq2.org/person/0001"))
+        self.assertEquals("SELECT DISTINCT ?p ?o WHERE { <http://cq2.org/person/0001> ?p ?o }", ''.join(client._getStatementsSparQL(subject="http://cq2.org/person/0001")))
         
-        self.assertEquals("SELECT DISTINCT ?o WHERE { <http://cq2.org/person/0001> <http://xmlns.com/foaf/0.1/name> ?o }", client._createSparQL(subj="http://cq2.org/person/0001", pred="http://xmlns.com/foaf/0.1/name"))
+        self.assertEquals("SELECT DISTINCT ?o WHERE { <http://cq2.org/person/0001> <http://xmlns.com/foaf/0.1/name> ?o }", ''.join(client._getStatementsSparQL(subject="http://cq2.org/person/0001", predicate="http://xmlns.com/foaf/0.1/name")))
 
-        self.assertEquals("SELECT DISTINCT * WHERE { <http://cq2.org/person/0001> <http://xmlns.com/foaf/0.1/name> <uri:obj> }", client._createSparQL(subj="http://cq2.org/person/0001", pred="http://xmlns.com/foaf/0.1/name", obj="uri:obj"))
+        self.assertEquals("SELECT DISTINCT * WHERE { <http://cq2.org/person/0001> <http://xmlns.com/foaf/0.1/name> <uri:obj> }", ''.join(client._getStatementsSparQL(subject="http://cq2.org/person/0001", predicate="http://xmlns.com/foaf/0.1/name", object="uri:obj")))
         
-        self.assertEquals("SELECT DISTINCT * WHERE { <http://cq2.org/person/0001> <http://xmlns.com/foaf/0.1/name> \"object\" }", client._createSparQL(subj="http://cq2.org/person/0001", pred="http://xmlns.com/foaf/0.1/name", obj="object"))
+        self.assertEquals("SELECT DISTINCT * WHERE { <http://cq2.org/person/0001> <http://xmlns.com/foaf/0.1/name> \"object\" }", ''.join(client._getStatementsSparQL(subject="http://cq2.org/person/0001", predicate="http://xmlns.com/foaf/0.1/name", object="object")))
 
 
     def testExecuteQuery(self):
@@ -143,13 +143,18 @@ class HttpClientTest(SeecrTestCase):
         result = self._resultFromServerResponse(gen, SPARQL_XML)
         self.assertEquals(SPARQL_XML, result)
 
-
     def testGetStatements(self):
         client = HttpClient(host="localhost", port=9999)
-        gen = compose(client.getStatements(subj='uri:subject'))
+        gen = compose(client.getStatements(subject='uri:subject'))
         result = self._resultFromServerResponse(gen, RESULT_JSON)
         self.assertEquals(RESULT_SPO, list(result))
 
+    def testGetStatementsGuards(self):
+        client = HttpClient(host="localhost", port=9999)
+        self.assertRaises(ValueError, lambda: list(compose(client.getStatements(subject='literal'))))
+        self.assertRaises(ValueError, lambda: list(compose(client.getStatements(predicate='literal'))))
+
+
     def testExecuteQuerySynchronous(self):
         client = HttpClient(host="localhost", port=9999, synchronous=True)
         client._urlopen = lambda *args, **kwargs: RESULT_JSON
@@ -165,11 +170,6 @@ class HttpClientTest(SeecrTestCase):
         client._urlopen = lambda *args, **kwargs: "SOME RESPONSE"
         list(compose(client.add(identifier="id", partname="ignored", data=RDFDATA)))
 
-        # list(compose(client.add(identifier="id", partname="ignored", data=RDFDATA)))
-        # self.assertRaises(
-        #     IOError, 
-        #     lambda: self._resultFromServerResponse(g, "Error description", responseStatus='500'))
-
         toSend = []
         client._urlopen = lambda url, data: toSend.append((url, data))
         list(compose(client.add(identifier="id", partname="ignored", data=RDFDATA)))
@@ -187,20 +187,6 @@ class HttpClientTest(SeecrTestCase):
             if len(e.args) > 0:
                 return e.args[0]
 
-    def to_be_moved_to_integrationtest_testGetStatements(self):
-        client = HttpClient(host="localhost", port=9999)
-        def _executeQuery(*args, **kwargs):
-            raise StopIteration(RESULT_JSON)
-        result = list(client.getStatements())
-        self.assertEquals([
-            (   u'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 
-                u'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 
-                u'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'
-            ), (
-                u'http://www.w3.org/1999/02/22-rdf-syntax-ns#subject', 
-                u'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', 
-                u'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'
-            )], result)
         
 PARSED_RESULT_JSON = [
     {
-- 
1.7.2.5


From 7107116cf53eca0c0236837dceeaafdee26fe3fa Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Fri, 28 Dec 2012 11:48:06 +0100
Subject: [PATCH 06/10] JJ/TS: improved Uri and Literal

- Uri does not inherit from str anymore
- ValueError raised if non-stringlike value given
- Improved test coverage
---
 client/meresco/owlim/literal.py |   11 +++++------
 client/meresco/owlim/uri.py     |   15 ++++++++++-----
 test/client/literaltest.py      |   29 ++++++++++++++++++++++++++++-
 test/client/uritest.py          |   24 +++++++++++++++++++++++-
 4 files changed, 66 insertions(+), 13 deletions(-)

diff --git a/client/meresco/owlim/literal.py b/client/meresco/owlim/literal.py
index 0cae890..1e6eb07 100644
--- a/client/meresco/owlim/literal.py
+++ b/client/meresco/owlim/literal.py
@@ -32,12 +32,11 @@ class Literal(object):
             lang=valueDict.get('xml:lang', None))
 
     def __init__(self, value, lang=None):
-        if isinstance(value, Literal):
-            self.value = value.value
-            self.lang = value.lang
-        else:
-            self.value = value
-            self.lang = lang
+        if not isinstance(value, basestring):
+            raise ValueError('Expected a stringlike object')
+
+        self.value = value
+        self.lang = lang
 
     def __eq__(self, other):
         return other.__class__ is self.__class__ and self.value == other.value and other.lang == self.lang
diff --git a/client/meresco/owlim/uri.py b/client/meresco/owlim/uri.py
index 8134b1d..5ed7a1b 100644
--- a/client/meresco/owlim/uri.py
+++ b/client/meresco/owlim/uri.py
@@ -26,17 +26,22 @@
 
 from Ft.Xml.Lib import Uri as FtUri 
 
-class Uri(str):
+class Uri(object):
     def __init__(self, value):
-        if isinstance(value, Uri):
-            self.value = value.value
-        else:
-            self.value = value
+        if not isinstance(value, basestring):
+            raise ValueError('Expected a stringlike object')
+        self.value = value
 
     @classmethod
     def fromDict(self, valueDict):
         return Uri(valueDict['value'])
 
+    def __str__(self):
+        return self.value
+
+    def __hash__(self):
+        return hash(str(self))
+
     def __repr__(self):
         return "%s(%s)" % (self.__class__.__name__, repr(self.value))
 
diff --git a/test/client/literaltest.py b/test/client/literaltest.py
index 86fd922..c4bcd52 100644
--- a/test/client/literaltest.py
+++ b/test/client/literaltest.py
@@ -26,10 +26,37 @@
 
 from seecr.test import SeecrTestCase
 
-from meresco.owlim import Literal
+from meresco.owlim import Literal, Uri
 
 
 class LiteralTest(SeecrTestCase):
+    def testInstantiate(self):
+        self.assertEquals('Li-ter-al', str(Literal('Li-ter-al')))
+        self.assertEquals("'Li-ter-al'@nl", str(Literal('Li-ter-al', lang='nl')))
+        self.assertEquals("Literal('Li-ter-al')", repr(Literal('Li-ter-al')))
+        self.assertEquals("Literal('Li-ter-al', lang='nl')", repr(Literal('Li-ter-al', lang='nl')))
+
+    def testHashForCollections(self):
+        l1 = Literal('u:ri', lang='nl')
+        l2 = Literal('u:ri', lang='nl')
+        self.assertEquals(l1, l2)
+        self.assertEquals(hash(l1), hash(l2))
+        coll = set([l1, l2])
+        self.assertEquals(1, len(coll))
+
+        self.assertNotEqual(hash(l1), hash(Literal('u:ri', lang='en')))
+        self.assertNotEqual(hash(l1), hash(Literal('U:RI', lang='nl')))
+
+    def testOnlyStringLikeObjects(self):
+        self.assertRaises(ValueError, lambda: Literal(42))
+        self.assertRaises(ValueError, lambda: Literal(object()))
+        self.assertEquals('u:ri', str(Literal('u:ri')))
+        self.assertEquals('u:ri', str(Literal(u'u:ri')))
+
+        # Re-wrapping Literal (or Uri) disallowed
+        self.assertRaises(ValueError, lambda: Literal(Literal('u:ri')))
+        self.assertRaises(ValueError, lambda: Literal(Uri('u:ri')))
+
     def testWithoutLang(self):
         l = Literal.fromDict({"type": "literal", "value": "http://www.rnaproject.org/data/rnax/odw/InformationConcept"})
         self.assertEquals("http://www.rnaproject.org/data/rnax/odw/InformationConcept", l.value)
diff --git a/test/client/uritest.py b/test/client/uritest.py
index cfb3c7e..1237f9f 100644
--- a/test/client/uritest.py
+++ b/test/client/uritest.py
@@ -26,7 +26,7 @@
 
 from seecr.test import SeecrTestCase
 
-from meresco.owlim import Uri
+from meresco.owlim import Uri, Literal
 
 
 class UriTest(SeecrTestCase):
@@ -34,3 +34,25 @@ class UriTest(SeecrTestCase):
         u = Uri.fromDict({"type": "uri", "value": "http://www.rnaproject.org/data/rnax/odw/InformationConcept"})
         self.assertNotEquals("http://www.rnaproject.org/data/rnax/odw/InformationConcept", u)
         self.assertEquals("http://www.rnaproject.org/data/rnax/odw/InformationConcept", str(u))
+        self.assertEquals(u, Uri('http://www.rnaproject.org/data/rnax/odw/InformationConcept'))
+
+    def testHashForCollections(self):
+        uri1 = Uri('u:ri')
+        uri2 = Uri('u:ri')
+        self.assertEquals(uri1, uri2)
+        self.assertEquals(hash(uri1), hash(uri2))
+        coll = set([uri1, uri2])
+        self.assertEquals(1, len(coll))
+
+        self.assertNotEqual(hash(uri1), hash(Uri('U:RI')))
+
+    def testOnlyStringLikeObjects(self):
+        self.assertRaises(ValueError, lambda: Uri(42))
+        self.assertRaises(ValueError, lambda: Uri(object()))
+        self.assertEquals('u:ri', str(Uri('u:ri')))
+        self.assertEquals('u:ri', str(Uri(u'u:ri')))
+
+        # Re-wrapping Uri (or Literal) disallowed
+        self.assertRaises(ValueError, lambda: Uri(Uri('u:ri')))
+        self.assertRaises(ValueError, lambda: Uri(Literal('u:ri')))
+
-- 
1.7.2.5


From b3704f512cb9181018260a33be7ac1dc9f457e06 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Fri, 28 Dec 2012 13:33:00 +0100
Subject: [PATCH 07/10] JJ/TS: spacewhite

---
 test/client/httpclienttest.py |    1 -
 1 files changed, 0 insertions(+), 1 deletions(-)

diff --git a/test/client/httpclienttest.py b/test/client/httpclienttest.py
index 5c3835b..2c5da7e 100644
--- a/test/client/httpclienttest.py
+++ b/test/client/httpclienttest.py
@@ -154,7 +154,6 @@ class HttpClientTest(SeecrTestCase):
         self.assertRaises(ValueError, lambda: list(compose(client.getStatements(subject='literal'))))
         self.assertRaises(ValueError, lambda: list(compose(client.getStatements(predicate='literal'))))
 
-
     def testExecuteQuerySynchronous(self):
         client = HttpClient(host="localhost", port=9999, synchronous=True)
         client._urlopen = lambda *args, **kwargs: RESULT_JSON
-- 
1.7.2.5


From d4c6d3c0e75b4677b4f5d7b2db009f50cdd85e78 Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Wed, 2 Jan 2013 14:35:02 +0100
Subject: [PATCH 08/10] JJ/HM: Export/backup function

---
 client/meresco/owlim/httpclient.py                 |    6 ++++
 .../meresco/owlimhttpserver/OwlimHttpHandler.java  |    9 +++++-
 .../meresco/owlimhttpserver/OwlimTripleStore.java  |   30 ++++++++++++++++++++
 .../org/meresco/owlimhttpserver/TripleStore.java   |    2 +
 .../owlimhttpserver/OwlimHttpHandlerTest.java      |   27 ++++++++++++++++++
 .../owlimhttpserver/OwlimTripleStoreTest.java      |   23 +++++++++++++++
 .../test/org/meresco/owlimhttpserver/TSMock.java   |    4 ++
 test/client/httpclienttest.py                      |    7 ++++
 8 files changed, 107 insertions(+), 1 deletions(-)

diff --git a/client/meresco/owlim/httpclient.py b/client/meresco/owlim/httpclient.py
index 1dc1ce0..5f64e26 100644
--- a/client/meresco/owlim/httpclient.py
+++ b/client/meresco/owlim/httpclient.py
@@ -78,6 +78,12 @@ class HttpClient(object):
         jsonString = yield self._sparqlQuery(query)
         raise StopIteration(self._getStatementsResults(jsonString, subject=subject, predicate=predicate, object=object))
 
+    def export(self, identifier):
+        if not identifier:
+            raise ValueError("identifier cannot be empty")
+        path = "/export?%s" % urlencode(dict(identifier=identifier))
+        yield self._send(path=path, body=None)
+
     def _sparqlQuery(self, query, queryResultFormat=None):
         path = "/query?%s" % urlencode(dict(query=query))
         headers = None
diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
index e44d647..b6a6e18 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
@@ -71,7 +71,6 @@ public class OwlimHttpHandler implements HttpHandler {
         String rawQueryString = requestURI.getRawQuery();
         QueryParameters queryParameters = Utils.parseQS(rawQueryString);
         OutputStream outputStream = exchange.getResponseBody();
-
         try {
             try {
                 if (path.equals("/add")) {
@@ -133,6 +132,8 @@ public class OwlimHttpHandler implements HttpHandler {
                     } catch (RDFParseException e) {
                         _writeResponse("Invalid\n" + e.toString(), outputStream);
                     }
+                } else if (path.equals("/export")) {
+                    export(queryParameters);
                 } else {
                     exchange.sendResponseHeaders(404, 0);
                     return;
@@ -203,6 +204,12 @@ public class OwlimHttpHandler implements HttpHandler {
         validator.validate(httpBody);
     }
 
+    public void export(QueryParameters params) {
+        System.out.println("export OwlimHttpHandler");
+        String identifier = params.singleValue("identifier");
+        tripleStore.export(identifier);
+    }
+
     public String sparqlForm(QueryParameters params) {
         String query;
         if (params.containsKey("query")) {
diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java b/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
index a917e40..21f7f80 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
@@ -33,7 +33,10 @@ import java.io.StringReader;
 import java.io.OutputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
+import java.io.FileOutputStream;
+import java.io.BufferedOutputStream;
 import java.util.List;
+import java.util.zip.GZIPOutputStream;
 
 import com.ontotext.trree.owlim_ext.Repository;
 import com.ontotext.trree.owlim_ext.SailImpl;
@@ -62,6 +65,8 @@ import org.openrdf.repository.RepositoryException;
 import org.openrdf.repository.RepositoryResult;
 import org.openrdf.repository.sail.SailRepository;
 
+import org.openrdf.rio.Rio;
+import org.openrdf.rio.RDFWriter;
 import org.openrdf.rio.RDFFormat;
 import org.openrdf.rio.RDFParseException;
 
@@ -264,6 +269,31 @@ public class OwlimTripleStore implements TripleStore {
         }   
     }
 
+    public void export(String identifier) {
+        RepositoryConnection conn = null;
+        OutputStream writer = null;
+        RDFFormat format = RDFFormat.TRIG;
+        try {
+            conn = repository.getConnection();
+            File backupDir = new File(dir, "backups");
+            backupDir.mkdirs();
+            File exportFile = new File(backupDir, "backup-" + identifier + ".trig.gz");
+            System.out.println("Export to:" + exportFile);
+            writer = new GZIPOutputStream(new BufferedOutputStream(new FileOutputStream(exportFile)));
+            RDFWriter rdfWriter = Rio.createWriter(format, writer);            
+            conn.export(rdfWriter);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        } finally {
+            try {
+                writer.close();
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+            close(conn);
+        }
+    }
+
     public void undoCommit() {}
 
 }
diff --git a/server/src/java/org/meresco/owlimhttpserver/TripleStore.java b/server/src/java/org/meresco/owlimhttpserver/TripleStore.java
index d5e72b8..0dd8475 100644
--- a/server/src/java/org/meresco/owlimhttpserver/TripleStore.java
+++ b/server/src/java/org/meresco/owlimhttpserver/TripleStore.java
@@ -54,6 +54,8 @@ public interface TripleStore {
 
     void startup();
 
+    void export(String identifier);
+
     void undoCommit();
 }
 
diff --git a/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java b/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
index e5d4255..26e6365 100644
--- a/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
+++ b/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
@@ -108,6 +108,10 @@ public class OwlimHttpHandlerTest {
             actions.add(params);
             return "SPARQLFORM";
         }
+        public void export(QueryParameters params) {
+            actions.add("export");
+            actions.add(params);
+        }
     }
 
     public class HttpExchangeMock extends HttpExchange {
@@ -455,4 +459,27 @@ public class OwlimHttpHandlerTest {
         assertEquals("application/sparql-results+xml", exchange.getResponseHeaders().getFirst("Content-Type"));
     }
 
+    @Test public void testExportDispatch() throws Exception {
+        OwlimHttpHandlerMock h = new OwlimHttpHandlerMock();
+
+        HttpExchangeMock exchange = new HttpExchangeMock("/export?identifier=identifier", "");
+        h.handle(exchange);
+        assertEquals(2, h.actions.size());
+        assertEquals("export", h.actions.get(0));
+        QueryParameters qp = (QueryParameters) h.actions.get(1);
+        assertEquals(1, qp.size());
+        assertEquals("identifier", qp.singleValue("identifier"));
+    }
+
+    @Test public void testExport() throws Exception {
+        TSMock tsmock = new TSMock();
+        TLMock tlmock = new TLMock();
+        OwlimHttpHandler h = new OwlimHttpHandler(tlmock, tsmock);
+
+        HttpExchangeMock exchange = new HttpExchangeMock("/export?identifier=identifier", "");
+        h.handle(exchange);
+        assertEquals(0, tlmock.actions.size());
+        assertEquals(1, tsmock.actions.size());
+        assertEquals("export:identifier", tsmock.actions.get(0));
+    }
 }
diff --git a/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java b/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
index 48b08f6..f0548a7 100644
--- a/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
+++ b/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
@@ -28,7 +28,11 @@
 package org.meresco.owlimhttpserver;
 
 import java.util.List;
+import java.util.zip.GZIPInputStream;
 import java.io.File;
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.io.FileInputStream;
 import org.junit.Test;
 import org.junit.Before;
 import org.junit.After;
@@ -165,4 +169,23 @@ public class OwlimTripleStoreTest {
             assertTrue(e.toString().contains("org.openrdf.repository.RepositoryException"));
         }
     }
+
+    @Test
+    public void testExport() throws Exception {
+        ts = new OwlimTripleStore(tempdir, "storageName");
+        ts.startup();
+        ts.addTriple("uri:subj|uri:pred|uri:obj");
+        ts.export("identifier");
+        ts.shutdown();
+        File backup = new File(new File(tempdir, "backups"), "backup-identifier.trig.gz");
+        assertTrue(backup.isFile());
+        BufferedReader reader = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(backup))));
+        StringBuilder filedata = new StringBuilder();
+        String line = reader.readLine();
+        while(line != null){
+            filedata.append(line);
+            line = reader.readLine();
+        } 
+        assertTrue(filedata.toString(), filedata.toString().contains("<uri:subj> <uri:pred> <uri:obj>"));
+    }
 }
diff --git a/server/src/test/org/meresco/owlimhttpserver/TSMock.java b/server/src/test/org/meresco/owlimhttpserver/TSMock.java
index df8a5f5..775b52d 100644
--- a/server/src/test/org/meresco/owlimhttpserver/TSMock.java
+++ b/server/src/test/org/meresco/owlimhttpserver/TSMock.java
@@ -84,6 +84,10 @@ public class TSMock implements TripleStore {
         actions.add("startup");
     }
 
+    public void export(String identifier) {
+        actions.add("export:" + identifier);
+    }
+
     public List<Namespace> getNamespaces() {
         List<Namespace> namespaces = new ArrayList<Namespace>();
         namespaces.add(new NamespaceImpl("rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#"));
diff --git a/test/client/httpclienttest.py b/test/client/httpclienttest.py
index 2c5da7e..841c6f5 100644
--- a/test/client/httpclienttest.py
+++ b/test/client/httpclienttest.py
@@ -174,6 +174,13 @@ class HttpClientTest(SeecrTestCase):
         list(compose(client.add(identifier="id", partname="ignored", data=RDFDATA)))
         self.assertEquals([("http://localhost:9999/update?identifier=id", RDFDATA)], toSend)
 
+    def testExport(self):
+        client = HttpClient(host="localhost", port=9999)
+        toSend = []
+        client._send = lambda path, body: toSend.append((path, body))
+        list(compose(client.export(identifier="id")))
+        self.assertEquals([("/export?identifier=id", None)], toSend)
+
     def _resultFromServerResponse(self, g, data, responseStatus='200'):
         s = g.next()
         self.assertEquals(Suspend, type(s))
-- 
1.7.2.5


From e7eb969d267a9e8b3f9a87ac614594bd1aad2ea8 Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Wed, 2 Jan 2013 16:23:25 +0100
Subject: [PATCH 09/10] JJ/HM: Removed prints

---
 .../meresco/owlimhttpserver/OwlimHttpHandler.java  |    1 -
 .../meresco/owlimhttpserver/OwlimTripleStore.java  |    1 -
 2 files changed, 0 insertions(+), 2 deletions(-)

diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
index b6a6e18..e61c4ec 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
@@ -205,7 +205,6 @@ public class OwlimHttpHandler implements HttpHandler {
     }
 
     public void export(QueryParameters params) {
-        System.out.println("export OwlimHttpHandler");
         String identifier = params.singleValue("identifier");
         tripleStore.export(identifier);
     }
diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java b/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
index 21f7f80..ce3f2e9 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
@@ -278,7 +278,6 @@ public class OwlimTripleStore implements TripleStore {
             File backupDir = new File(dir, "backups");
             backupDir.mkdirs();
             File exportFile = new File(backupDir, "backup-" + identifier + ".trig.gz");
-            System.out.println("Export to:" + exportFile);
             writer = new GZIPOutputStream(new BufferedOutputStream(new FileOutputStream(exportFile)));
             RDFWriter rdfWriter = Rio.createWriter(format, writer);            
             conn.export(rdfWriter);
-- 
1.7.2.5


From 2644cf39f033b1b8fcc291c9fc9c0813a6f7ddea Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Wed, 2 Jan 2013 16:40:07 +0100
Subject: [PATCH 10/10] JJ/HM: License 2013

---
 client/meresco/owlim/httpclient.py                 |    2 +-
 doc/license.conf                                   |    2 +-
 .../meresco/owlimhttpserver/OwlimHttpHandler.java  |    2 +-
 .../meresco/owlimhttpserver/OwlimTripleStore.java  |    2 +-
 .../org/meresco/owlimhttpserver/TripleStore.java   |    2 +-
 .../owlimhttpserver/OwlimHttpHandlerTest.java      |    2 +-
 .../owlimhttpserver/OwlimTripleStoreTest.java      |    2 +-
 .../test/org/meresco/owlimhttpserver/TSMock.java   |    2 +-
 test/client/httpclienttest.py                      |    2 +-
 9 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/client/meresco/owlim/httpclient.py b/client/meresco/owlim/httpclient.py
index 5f64e26..4c9b172 100644
--- a/client/meresco/owlim/httpclient.py
+++ b/client/meresco/owlim/httpclient.py
@@ -6,7 +6,7 @@
 # 
 # Copyright (C) 2010-2011 Maastricht University Library http://www.maastrichtuniversity.nl/web/Library/home.htm
 # Copyright (C) 2010-2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
-# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Owlim"
 # 
diff --git a/doc/license.conf b/doc/license.conf
index 925c887..92f0060 100644
--- a/doc/license.conf
+++ b/doc/license.conf
@@ -3,7 +3,7 @@
     "description": "The Meresco Owlim package consists out of a HTTP server written in Java that\nprovides access to an Owlim Triple store, as well as python bindings to\ncommunicate as a client with the server.",
     "license": "GPLv2",
     "copyrights": [
-        {"name": "Seecr (Seek You Too B.V.)", "url": "http://seecr.nl", "years": [2012]} 
+        {"name": "Seecr (Seek You Too B.V.)", "url": "http://seecr.nl", "years": [2013]} 
     ]   
 }
 
diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
index e61c4ec..cab29ea 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
@@ -4,7 +4,7 @@
  * provides access to an Owlim Triple store, as well as python bindings to
  * communicate as a client with the server. 
  * 
- * Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+ * Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
  * Copyright (C) 2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
  * 
  * This file is part of "Meresco Owlim"
diff --git a/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java b/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
index ce3f2e9..3099ddd 100644
--- a/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
+++ b/server/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
@@ -4,7 +4,7 @@
  * provides access to an Owlim Triple store, as well as python bindings to
  * communicate as a client with the server. 
  * 
- * Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+ * Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
  * Copyright (C) 2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
  * 
  * This file is part of "Meresco Owlim"
diff --git a/server/src/java/org/meresco/owlimhttpserver/TripleStore.java b/server/src/java/org/meresco/owlimhttpserver/TripleStore.java
index 0dd8475..fdce809 100644
--- a/server/src/java/org/meresco/owlimhttpserver/TripleStore.java
+++ b/server/src/java/org/meresco/owlimhttpserver/TripleStore.java
@@ -4,7 +4,7 @@
  * provides access to an Owlim Triple store, as well as python bindings to
  * communicate as a client with the server. 
  * 
- * Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+ * Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
  * Copyright (C) 2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
  * 
  * This file is part of "Meresco Owlim"
diff --git a/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java b/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
index 26e6365..93d10e1 100644
--- a/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
+++ b/server/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
@@ -4,7 +4,7 @@
  * provides access to an Owlim Triple store, as well as python bindings to
  * communicate as a client with the server. 
  * 
- * Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+ * Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
  * Copyright (C) 2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
  * 
  * This file is part of "Meresco Owlim"
diff --git a/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java b/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
index f0548a7..c4fc94a 100644
--- a/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
+++ b/server/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
@@ -4,7 +4,7 @@
  * provides access to an Owlim Triple store, as well as python bindings to
  * communicate as a client with the server. 
  * 
- * Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+ * Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
  * Copyright (C) 2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
  * 
  * This file is part of "Meresco Owlim"
diff --git a/server/src/test/org/meresco/owlimhttpserver/TSMock.java b/server/src/test/org/meresco/owlimhttpserver/TSMock.java
index 775b52d..7f7cc28 100644
--- a/server/src/test/org/meresco/owlimhttpserver/TSMock.java
+++ b/server/src/test/org/meresco/owlimhttpserver/TSMock.java
@@ -4,7 +4,7 @@
  * provides access to an Owlim Triple store, as well as python bindings to
  * communicate as a client with the server. 
  * 
- * Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+ * Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
  * 
  * This file is part of "Meresco Owlim"
  * 
diff --git a/test/client/httpclienttest.py b/test/client/httpclienttest.py
index 841c6f5..0c43f0c 100644
--- a/test/client/httpclienttest.py
+++ b/test/client/httpclienttest.py
@@ -6,7 +6,7 @@
 # 
 # Copyright (C) 2010-2011 Maastricht University Library http://www.maastrichtuniversity.nl/web/Library/home.htm
 # Copyright (C) 2010-2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
-# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Owlim"
 # 
-- 
1.7.2.5

