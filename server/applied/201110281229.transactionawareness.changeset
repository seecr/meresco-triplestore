Changeset created on Fri Oct 28 12:29:12 UTC 2011 by Seecr (Seek You Too B.V.)

Description: Transactionawareness for triplestore

    Transactions are recorded so they can be played back if the triplestore is restarted after an unexpected shutdown.

Baseline version: svn+ssh://svn@svn.cq2.org/svn/owlimhttpserver/workingsets/1.0-openindex/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/bin/run.sh version_1/bin/run.sh
--- version_0/bin/run.sh	2011-10-26 15:40:38.000000000 +0200
+++ version_1/bin/run.sh	2011-10-28 14:29:06.000000000 +0200
@@ -1,30 +1,38 @@
 #!/bin/bash
 ## begin license ##
-#
-#    OwlimHttpServer provides a simple HTTP interface to an OWLim triplestore
-#    Copyright (C) 2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
-#
-#    This file is part of OwlimHttpServer.
-#
-#    Storage is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Storage is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Storage; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "OwlimHttpServer" provides a simple HTTP interface to an OWLim triplestore. 
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
+# 
+# This file is part of "OwlimHttpServer"
+# 
+# "OwlimHttpServer" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "OwlimHttpServer" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "OwlimHttpServer"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 OWLIMJARS=$(find /usr/share/java/owlim-lite-java -type f -name "*.jar")
 MY_JARS=$(find /usr/share/java/owlimhttpserver -type f -name "*.jar")
 
+(                                               # DO_NOT_DISTRIBUTE
+    cd ..                                       # DO_NOT_DISTRIBUTE
+    ./build.sh                                  # DO_NOT_DISTRIBUTE
+)                                               # DO_NOT_DISTRIBUTE
+MY_JARS=$(find .. -type f -name "*.jar")        # DO_NOT_DISTRIBUTE
+
 CP="$(echo ${MY_JARS} | tr ' ' ':'):$(echo ${OWLIMJARS} | tr ' ' ':')"
 
 exec java -cp ${CP} org.meresco.owlimhttpserver.OwlimServer $@
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/build.sh version_1/build.sh
--- version_0/build.sh	2011-10-26 15:40:38.000000000 +0200
+++ version_1/build.sh	2011-10-28 14:29:06.000000000 +0200
@@ -1,30 +1,33 @@
 #!/bin/bash
 ## begin license ##
-#
-#    OwlimHttpServer provides a simple HTTP interface to an OWLim triplestore
-#    Copyright (C) 2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
-#
-#    This file is part of OwlimHttpServer.
-#
-#    Storage is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Storage is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Storage; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "OwlimHttpServer" provides a simple HTTP interface to an OWLim triplestore. 
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
+# 
+# This file is part of "OwlimHttpServer"
+# 
+# "OwlimHttpServer" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "OwlimHttpServer" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "OwlimHttpServer"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 VERSION=$1
 
 OWLIMJARS=$(find /usr/share/java/owlim-lite-java/ -type f -name "*.jar")
+JARS=$(find jars -type f -name "*.jar")
 
 BUILDDIR=./build
 TARGET=owlimhttpserver.jar
@@ -35,7 +38,7 @@
 test -d $BUILDDIR && rm -r $BUILDDIR
 mkdir $BUILDDIR
 
-CP="$(echo $OWLIMJARS | tr ' ' ':')"
+CP="$(echo $OWLIMJARS | tr ' ' ':'):$(echo $JARS | tr ' ' ':')"
 
 javaFiles=$(find src/java -name "*.java")
 javac -d $BUILDDIR -cp $CP $javaFiles
Binary files version_0/jars/commons-io-2.1.jar and version_1/jars/commons-io-2.1.jar differ
Binary files version_0/jars/commons-lang3-3.0.1.jar and version_1/jars/commons-lang3-3.0.1.jar differ
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java version_1/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java
--- version_0/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java	2011-10-26 15:40:38.000000000 +0200
+++ version_1/src/java/org/meresco/owlimhttpserver/OwlimHttpHandler.java	2011-10-28 14:29:06.000000000 +0200
@@ -36,12 +36,13 @@
 
 import java.net.URI;
 
-import org.openrdf.rio.RDFFormat;
-
 public class OwlimHttpHandler implements HttpHandler {
-    TripleStore ts;
-    public OwlimHttpHandler(TripleStore ts) {
-        this.ts = ts;
+    TransactionLog transactionLog;
+    TripleStore tripleStore;
+
+    public OwlimHttpHandler(TransactionLog transactionLog, TripleStore tripleStore) {
+        this.transactionLog = transactionLog;
+        this.tripleStore = tripleStore;
     }
 
     public void handle(HttpExchange exchange) throws IOException {
@@ -71,7 +72,7 @@
                     exchange.sendResponseHeaders(404, 0);
                     return;
                 }
-            } catch (RuntimeException e) {
+            } catch (Exception e) {
                 exchange.sendResponseHeaders(500, 0);
                 String response = Utils.getStackTrace(e);
                 _writeResponse(response, outputStream);
@@ -95,24 +96,24 @@
         }
     }
 
-    public void updateRDF(QueryParameters params, String httpBody) {
+    public void updateRDF(QueryParameters params, String httpBody) throws TransactionLogException {
         String identifier = params.singleValue("identifier");
-        ts.delete(identifier);
-        ts.addRDF(identifier, httpBody, RDFFormat.RDFXML);
+        transactionLog.delete(identifier);
+        transactionLog.add(identifier, httpBody);
     }
 
-    public void addRDF(QueryParameters params, String httpBody) {
+    public void addRDF(QueryParameters params, String httpBody) throws TransactionLogException {
         String identifier = params.singleValue("identifier");
-        ts.addRDF(identifier, httpBody, RDFFormat.RDFXML);
+        transactionLog.add(identifier, httpBody);
     }
 
-    public void deleteRDF(QueryParameters params) {
+    public void deleteRDF(QueryParameters params) throws TransactionLogException {
         String identifier = params.singleValue("identifier");
-        ts.delete(identifier);
+        transactionLog.delete(identifier);
     }
 
     public String executeQuery(QueryParameters params) {
         String query = params.singleValue("query");
-        return ts.executeQuery(query);
+        return tripleStore.executeQuery(query);
     }
 }
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/java/org/meresco/owlimhttpserver/OwlimServer.java version_1/src/java/org/meresco/owlimhttpserver/OwlimServer.java
--- version_0/src/java/org/meresco/owlimhttpserver/OwlimServer.java	2011-10-26 15:40:38.000000000 +0200
+++ version_1/src/java/org/meresco/owlimhttpserver/OwlimServer.java	2011-10-28 14:29:06.000000000 +0200
@@ -33,23 +33,45 @@
         Integer port; 
         String storeLocation;
         String storeName;
-        String rdfDirectory;
 
         try {
             port = new Integer(args[0]);
             storeLocation = args[1];
             storeName = args[2];
-            rdfDirectory = args[3];
         } catch(Exception e) {
-            System.out.println("Arguments: <port> <storeLocation> <storeName> <rdfFileDirectory>");
+            System.out.println("Arguments: <port> <storeLocation> <storeName>");
             return;
         }
 
-        TripleStore tripleStore = new OwlimTripleStore(new File(storeLocation), storeName, new File(rdfDirectory));
-        OwlimHttpHandler handler = new OwlimHttpHandler(tripleStore);
+        OwlimTripleStore tripleStore = new OwlimTripleStore(new File(storeLocation), storeName);
+        TransactionLog transactionLog = new TransactionLog(tripleStore, new File(storeLocation));
+        transactionLog.init();
+        OwlimHttpHandler handler = new OwlimHttpHandler(transactionLog, tripleStore);
         OwlimHttpServer httpServer = new OwlimHttpServer(port, 15);
 
+        registerShutdownHandler(tripleStore, transactionLog);
+
+        System.out.println("Triplestore started with " + String.valueOf(tripleStore.size()) + " statements");
+
         httpServer.setHandler(handler);
         httpServer.start();
     }
+
+    static void registerShutdownHandler(final TripleStore tripleStore, final TransactionLog transactionLog) {
+        Runtime.getRuntime().addShutdownHook(new Thread()
+        {
+            @Override
+            public void run()
+            {
+                System.out.println("Shutting down triplestore. Please wait...");
+                try {
+                    tripleStore.shutdown();
+                    transactionLog.clear();
+                    System.out.println("Shutdown completed.");
+                } catch (Exception e) {
+                    System.out.println("Shutdown failed.");
+                } 
+            }
+        });        
+    }
 }
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java version_1/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java
--- version_0/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java	2011-10-26 15:40:38.000000000 +0200
+++ version_1/src/java/org/meresco/owlimhttpserver/OwlimTripleStore.java	2011-10-28 14:29:06.000000000 +0200
@@ -26,11 +26,11 @@
 package org.meresco.owlimhttpserver;
 
 import java.io.File;
-import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.StringReader;
 import java.io.OutputStream;
 import java.io.ByteArrayOutputStream;
+import java.io.PrintStream;
 
 import com.ontotext.trree.owlim_ext.Repository;
 import com.ontotext.trree.owlim_ext.SailImpl;
@@ -61,43 +61,36 @@
 
 public class OwlimTripleStore implements TripleStore {
     File dir;
-    File rdfDir;
     SailRepository repository;
 
-    public OwlimTripleStore(File directory, String storageName, File rdfDirectory) {
+    OwlimTripleStore() {}
+
+    public OwlimTripleStore(File directory, String storageName) {
         dir = directory;
-        rdfDir = rdfDirectory;
         SailImpl owlimSail = new SailImpl();
         repository = new SailRepository(owlimSail);
         owlimSail.setParameter(Repository.PARAM_STORAGE_FOLDER, storageName);
         owlimSail.setParameter("ruleset", "empty");
+        startup();
+    }
+
+    public void startup() {
         try {
-            repository.setDataDir(directory);
+            repository.setDataDir(dir);
             repository.initialize();
         } catch (RepositoryException e) {
             throw new RuntimeException(e);
         }
-        
-        try {
-            for (File file : rdfDir.listFiles()) {
-                String fileName = file.getName();
-                if (fileName.endsWith(".rdf")) {
-                    addRDF(fileName, Utils.read(new FileInputStream(file)), RDFFormat.RDFXML);
-                }
-            }
-        } catch(IOException e) {
-            throw new RuntimeException(e);
-        }
     }
 
-    public void addRDF(String identifier, String rdfData, RDFFormat format) {
+    public void addRDF(String identifier, String rdfData) {
         URI context = new URIImpl(identifier);
         StringReader reader = new StringReader(rdfData);
         RepositoryConnection conn = null;
         try {
             conn = repository.getConnection();
             conn.setAutoCommit(false);
-            conn.add(reader, "", format, context);
+            conn.add(reader, "", RDFFormat.RDFXML, context);
         } catch (RepositoryException e) {
             throw new RuntimeException(e);
         } catch (IOException e) {
@@ -191,4 +184,25 @@
         }
     }
 
+    public void shutdown() throws Exception {
+        OutputStream os = new ByteArrayOutputStream();
+        PrintStream ps = new PrintStream(os);
+        try {
+            System.setErr(ps);
+            repository.shutDown();
+            if (!os.toString().equals("")) {
+                throw new RepositoryException(os.toString());
+            }   
+        } catch (RepositoryException e) {
+            e.printStackTrace();
+            throw e;
+        } catch (Exception e) {
+            e.printStackTrace();
+            System.out.println(os.toString());
+            throw e;
+        }   
+    }
+
+    public void undoCommit() {}
+
 }
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/java/org/meresco/owlimhttpserver/TransactionItem.java version_1/src/java/org/meresco/owlimhttpserver/TransactionItem.java
--- version_0/src/java/org/meresco/owlimhttpserver/TransactionItem.java	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/java/org/meresco/owlimhttpserver/TransactionItem.java	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,92 @@
+/* begin license *
+ * 
+ * "OwlimHttpServer" provides a simple HTTP interface to an OWLim triplestore. 
+ * 
+ * Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+ * 
+ * This file is part of "OwlimHttpServer"
+ * 
+ * "OwlimHttpServer" is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * 
+ * "OwlimHttpServer" is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with "OwlimHttpServer"; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ * 
+ * end license */
+
+package org.meresco.owlimhttpserver;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.io.BufferedWriter;
+import java.io.IOException;
+
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.xpath.XPathFactory;
+import javax.xml.xpath.XPathExpression;
+import javax.xml.xpath.XPathExpressionException;
+
+import org.w3c.dom.Document;
+import org.xml.sax.SAXException;
+
+import org.apache.commons.lang3.StringEscapeUtils;
+
+public class TransactionItem {
+    String action, identifier, filedata;
+
+    public TransactionItem(String action, String identifier, String filedata) {
+        this.action = action;
+        this.identifier = identifier;
+        this.filedata = filedata;
+    }
+
+    public static TransactionItem read(File file) throws Exception {
+        try {
+            DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
+            Document doc = domFactory.newDocumentBuilder().parse(file);
+            XPathFactory factory = XPathFactory.newInstance();
+
+            return new TransactionItem(
+                factory.newXPath().evaluate("/transaction_item/action/text()", doc),
+                factory.newXPath().evaluate("/transaction_item/identifier/text()", doc),
+                factory.newXPath().evaluate("/transaction_item/filedata/text()", doc));
+        } catch (Exception e) {
+            throw new Exception(e);    
+        }
+    }
+
+    public void write(File filepath) throws Exception {
+        try {
+            BufferedWriter out = new BufferedWriter(new FileWriter(filepath));
+            out.write("<transaction_item>" +
+                "<action>" + this.action + "</action>" +
+                "<identifier>" + StringEscapeUtils.escapeXml(this.identifier) + "</identifier>" + 
+                "<filedata>" + StringEscapeUtils.escapeXml(this.filedata) + "</filedata>" +
+                "</transaction_item>");
+            out.close();
+        } catch (Exception e) {
+            throw new Exception("Error: " + e.getMessage());
+        }
+    }
+
+    public String getAction() {
+        return this.action;
+    }
+
+    public String getIdentifier() {
+        return this.identifier;
+    }
+
+    public String getFiledata() {
+        return this.filedata;
+    }
+}
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/java/org/meresco/owlimhttpserver/TransactionLogException.java version_1/src/java/org/meresco/owlimhttpserver/TransactionLogException.java
--- version_0/src/java/org/meresco/owlimhttpserver/TransactionLogException.java	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/java/org/meresco/owlimhttpserver/TransactionLogException.java	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,32 @@
+/* begin license *
+ * 
+ * "OwlimHttpServer" provides a simple HTTP interface to an OWLim triplestore. 
+ * 
+ * Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+ * 
+ * This file is part of "OwlimHttpServer"
+ * 
+ * "OwlimHttpServer" is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * 
+ * "OwlimHttpServer" is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with "OwlimHttpServer"; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ * 
+ * end license */
+
+package org.meresco.owlimhttpserver;
+
+public class TransactionLogException extends Exception {
+    public TransactionLogException(Exception e) {
+        super(e);
+    }
+}
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/java/org/meresco/owlimhttpserver/TransactionLog.java version_1/src/java/org/meresco/owlimhttpserver/TransactionLog.java
--- version_0/src/java/org/meresco/owlimhttpserver/TransactionLog.java	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/java/org/meresco/owlimhttpserver/TransactionLog.java	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,166 @@
+/* begin license *
+ * 
+ * "OwlimHttpServer" provides a simple HTTP interface to an OWLim triplestore. 
+ * 
+ * Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+ * 
+ * This file is part of "OwlimHttpServer"
+ * 
+ * "OwlimHttpServer" is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * 
+ * "OwlimHttpServer" is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with "OwlimHttpServer"; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ * 
+ * end license */
+
+package org.meresco.owlimhttpserver;
+
+import java.io.IOException;
+import java.io.File;
+import java.util.Arrays;
+
+import org.apache.commons.io.FileUtils;
+
+public class TransactionLog {
+    TripleStore tripleStore;
+    File transactionLogDir;
+    File tempLogDir;
+
+    TransactionLog() {}
+
+    public TransactionLog(TripleStore tripleStore, File baseDir) throws IOException {
+        this.tripleStore = tripleStore;
+        this.transactionLogDir = new File(baseDir, "transactionLog");
+        this.transactionLogDir.mkdirs();
+        this.tempLogDir = new File(baseDir, "tempLog");
+        this.tempLogDir.mkdirs();
+        clearTempLogDir();
+    }
+
+    public void init() throws Exception {
+        if (recoverTripleStore()) {
+            persistTripleStore();
+            System.out.println("Recovering from transactionlog completed");
+        }
+    }
+
+    public void add(String identifier, String filedata) throws TransactionLogException {
+        doProcess("addRDF", identifier, filedata);
+    }
+
+    public void delete(String identifier) throws TransactionLogException {
+        doProcess("delete", identifier, "");
+    }
+
+    void doProcess(String action, String identifier, String filedata) throws TransactionLogException {
+        String filename = getTime();
+        try {
+            filename = prepare(action, identifier, filename, filedata);
+            if (action.equals("addRDF")) {
+                this.tripleStore.addRDF(identifier, filedata);
+            } else if (action.equals("delete")) {
+                this.tripleStore.delete(identifier);
+            }
+        } catch (Exception e) {
+            rollback(filename);
+            throw new TransactionLogException(e);
+        }
+
+        try {
+            commit(filename);
+        } catch (Exception e) {
+            rollbackAll(filename);
+            throw new TransactionLogException(e);
+        }
+    }
+
+    String prepare(String action, String identifier, String filename, String filedata) throws Exception {
+        File filepath = new File(this.tempLogDir, filename); 
+        while (filepath.exists()) {
+            filepath = new File(filepath + "_1");
+        }
+        new TransactionItem(action, identifier, filedata).write(filepath);
+        return filepath.getName();
+    }
+
+    void commit(String filename) {
+        File tmpFilepath = new File(this.tempLogDir, filename); 
+        File filepath = new File(this.transactionLogDir, filename);
+        while (filepath.exists()) {
+            filepath = new File(filepath + "_1");
+        }
+        tmpFilepath.renameTo(filepath);
+    }
+
+    void rollback(String filename) {
+        new File(this.tempLogDir, filename).delete();
+    }
+
+    void rollbackAll(String filename) {
+        this.tripleStore.undoCommit();
+        rollback(filename);
+    }
+
+    File getTempLogDir() {
+        return this.tempLogDir;
+    }
+
+    File getTransactionLogDir() {
+        return this.transactionLogDir;
+    }
+
+    String[] getTransactionItemFiles() {
+        String[] transactionItems = this.transactionLogDir.list();
+        Arrays.sort(transactionItems);
+        return transactionItems;
+    }
+
+    String getTime() {
+        return String.valueOf(System.currentTimeMillis());
+    }
+
+    void clear() throws IOException {
+       FileUtils.deleteDirectory(this.transactionLogDir);
+       this.transactionLogDir.mkdir();
+    }
+
+    void clearTempLogDir() throws IOException {
+        for (String filename: this.tempLogDir.list()) {
+            rollback(filename);
+        }
+    }
+
+    void persistTripleStore() throws Exception {
+        this.tripleStore.shutdown();
+        clear();
+        this.tripleStore.startup();
+    }
+
+    boolean recoverTripleStore() throws Exception {
+        String[] transactionItemFiles = getTransactionItemFiles();
+        if (transactionItemFiles.length > 0) {
+            System.out.println("Recovering " + String.valueOf(transactionItemFiles.length) + " files from transactionlog");
+        } else {
+            return false;
+        }
+
+        for(String filename: transactionItemFiles) {
+            TransactionItem item = TransactionItem.read(new File (this.transactionLogDir, filename));
+            if (item.getAction().equals("addRDF")) {
+                this.tripleStore.addRDF(item.getIdentifier(), item.getFiledata());
+            } else if (item.getAction().equals("delete")) {
+                this.tripleStore.delete(item.getIdentifier());
+            }
+        }
+        return true;
+    }
+}
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/java/org/meresco/owlimhttpserver/TripleStore.java version_1/src/java/org/meresco/owlimhttpserver/TripleStore.java
--- version_0/src/java/org/meresco/owlimhttpserver/TripleStore.java	2011-10-26 15:40:38.000000000 +0200
+++ version_1/src/java/org/meresco/owlimhttpserver/TripleStore.java	2011-10-28 14:29:06.000000000 +0200
@@ -25,7 +25,6 @@
 
 package org.meresco.owlimhttpserver;
 
-import org.openrdf.rio.RDFFormat;
 import org.openrdf.model.Resource;
 import org.openrdf.model.URI;
 import org.openrdf.model.Value;
@@ -34,12 +33,18 @@
 
 
 public interface TripleStore {
-    void addRDF(String identifier, String httpBody, RDFFormat format);
+    void addRDF(String identifier, String body);
 
     void delete(String identifier);
 
     String executeQuery(String sparQL);
 
     RepositoryResult<Statement> getStatements(Resource subj, URI pred, Value obj);
+
+    void shutdown() throws Exception;
+
+    void startup();
+
+    void undoCommit();
 }
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/alltests.sh version_1/src/test/alltests.sh
--- version_0/src/test/alltests.sh	2011-10-26 15:40:38.000000000 +0200
+++ version_1/src/test/alltests.sh	2011-10-28 14:29:06.000000000 +0200
@@ -34,7 +34,10 @@
     exit 1
 fi
 
-CP="$JUNIT:$(ls -1 /usr/share/java/owlim-lite-java/*.jar | tr '\n' ':')../../build"
+OWLIMJARS=$(find /usr/share/java/owlim-lite-java/ -type f -name "*.jar")
+JARS=$(find ../../jars -type f -name "*.jar")
+
+CP="$JUNIT:$(echo $OWLIMJARS | tr ' ' ':'):$(echo $JARS | tr ' ' ':'):../../build"
 
 javaFiles=$(find ../java -name "*.java")
 javac -d ${BUILDDIR} -cp $CP $javaFiles
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/integration/__init__.py version_1/src/test/integration/__init__.py
--- version_0/src/test/integration/__init__.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/test/integration/__init__.py	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,9 @@
+## begin license ##
+# 
+# All rights reserved.
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+## end license ##
+
+from integrationtestcase import globalSetUp, globalTearDown, IntegrationTestCase
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/integration/integrationtestcase.py version_1/src/test/integration/integrationtestcase.py
--- version_0/src/test/integration/integrationtestcase.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/test/integration/integrationtestcase.py	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,199 @@
+## begin license ##
+# 
+# "OwlimHttpServer" provides a simple HTTP interface to an OWLim triplestore. 
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "OwlimHttpServer"
+# 
+# "OwlimHttpServer" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "OwlimHttpServer" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "OwlimHttpServer"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from __future__ import with_statement
+
+from os.path import isdir, join, abspath, dirname, basename
+from os import system, listdir
+from sys import stdout
+
+from cq2utils import CQ2TestCase
+from random import randint, choice
+from time import sleep, time 
+from hashlib import md5
+
+from lxml.etree import XMLSyntaxError, parse
+from StringIO import StringIO
+from subprocess import Popen
+from signal import SIGTERM
+from os import waitpid, kill, WNOHANG
+from urllib import urlopen, urlencode
+from re import DOTALL, compile
+
+from meresco.components import readConfig
+
+from traceback import print_exc
+
+mypath = dirname(abspath(__file__))
+binDir = join(dirname(dirname(dirname(mypath))), 'bin')
+if not isdir(binDir):
+    binDir = '/usr/bin'
+
+def stdoutWrite(aString):
+    stdout.write(aString)
+    stdout.flush()
+
+class PortNumberGenerator(object):
+    startNumber = randint(50000, 60000)
+
+    @classmethod
+    def next(cls):
+        cls.startNumber += 1
+        return cls.startNumber
+
+class IntegrationTestCase(CQ2TestCase):
+    def setUp(self):
+        CQ2TestCase.setUp(self)
+        global state
+        self.state = state
+
+    def __getattr__(self, name):
+        if name.startswith('_'):
+            raise AttributeError(name)
+        return getattr(self.state, name)
+
+class IntegrationState(object):
+    def __init__(self, stateName, fastMode):
+        self.stateName = stateName
+        self.pids = {}
+        self.integrationTempdir = '/tmp/integrationtest-owlimhttpserver-%s' % stateName 
+        self.owlimDataDir = join(self.integrationTempdir, 'owlim-data')
+        self.testdataDir = join(dirname(mypath), 'data')
+        if not fastMode:
+            system('rm -rf ' + self.integrationTempdir)
+            system('mkdir --parents ' + self.integrationTempdir)
+        
+        self.owlimPort = PortNumberGenerator.next()
+
+        #config = readConfig(join(documentationPath, 'openindex.config'))
+        
+        # test example config has neccessary parameters
+#        def setConfig(parameter, value):
+#            assert config[parameter]
+#            config[parameter] = value
+#
+#        setConfig('solrPortNumber', str(self.solrPort))
+#        setConfig('owlimPortNumber', str(self.owlimPort))
+#        setConfig('host', 'openindex.search')
+#
+#        config['global.apacheLogStream'] = 'disabled'
+#
+#        self._writeConfig(config)
+#        system("sed 's,^jetty\.home=.*$,jetty.home=%s,' -i %s" % (
+#            self.solrDataDir,
+#            join(self.solrDataDir, 'start.config')))
+         
+
+#    def _writeConfig(self, config):
+#        self.configFilename = join(self.integrationTempdir, 'openindex.config')
+#        with open(self.configFilename, 'w') as f:
+#            f.write("""
+##
+## Config file for OpenIndex server
+##
+#""")
+#            for item in config.items():
+#                f.write('%s = %s\n' % item)
+
+    def initialize(self):
+        self.startOwlimServer()
+
+        waitingTime = self._createDatabase()
+        print 'Waiting for search.'
+        for seconds in range(waitingTime):
+            stdout.write('-')
+            stdout.flush()
+            sleep(1)
+        stdout.write('-')
+        stdout.flush()
+
+    def _createDatabase(self):
+        if fastMode:
+            print "Reusing database in", self.integrationTempdir
+            return 2
+        start = time()
+        print "Creating database in", self.integrationTempdir
+        waitingTime = 3
+        try: 
+            if self.stateName == 'default':
+                waitingTime = 0
+            else:
+                raise ValueError('State "%s" not supported' % self.stateName)
+            print "Finished creating database in %s seconds" % (time() - start)
+        except Exception, e:
+            print 'Error received while creating database for', self.stateName
+            print_exc()
+            exit(1)
+        return waitingTime
+
+    def startOwlimServer(self):
+        self._startServer('owlim', 'run.sh', 'http://localhost:%s/sparql' % self.owlimPort, port=self.owlimPort, storeLocation=self.owlimDataDir)
+
+    def _startServer(self, serviceName, binScript, serviceReadyUrl, port, storeLocation, redirect=True):
+        stdoutfile = join(self.integrationTempdir, "stdouterr-%s.log" % serviceName)
+        stdouterrlog = open(stdoutfile, 'w')
+        fileno = stdouterrlog.fileno() if redirect else None
+        serverProcess = Popen(
+                args=[join(binDir, binScript), str(port), storeLocation, serviceName, "/tmp"],
+                cwd=binDir,
+                stdout=fileno,
+                stderr=fileno)
+        self.pids[serviceName] = serverProcess.pid
+
+        stdoutWrite("Starting service '%s', for state '%s' : v" % (serviceName, self.stateName))
+        done = False
+        while not done:
+            try:
+                stdoutWrite('r')
+                sleep(0.1)
+                urlopen(serviceReadyUrl).read()
+                done = True
+            except IOError:
+                if serverProcess.poll() != None:
+                    del self.pids[serviceName]
+                    exit('Service "%s" died, check "%s"' % (serviceName, stdoutfile))
+        stdoutWrite('oom!\n')
+
+    def _stopServer(self, serviceName):
+        kill(self.pids[serviceName], SIGTERM)
+        waitpid(self.pids[serviceName], WNOHANG)
+
+    def restartOwlimServer(self):
+        self._stopServer('owlim')
+        self.startOwlimServer()
+
+    def tearDown(self):
+        for serviceName in self.pids.keys():
+            self._stopServer(serviceName)
+
+def globalSetUp(fast, stateName):
+    global state, fastMode
+    fastMode = fast
+    state = IntegrationState(stateName, fastMode)
+    state.initialize()
+
+def globalTearDown():
+    global state
+    state.tearDown()
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/integration/owlimtest.py version_1/src/test/integration/owlimtest.py
--- version_0/src/test/integration/owlimtest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/test/integration/owlimtest.py	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,102 @@
+## begin license ##
+# 
+# "OwlimHttpServer" provides a simple HTTP interface to an OWLim triplestore. 
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "OwlimHttpServer"
+# 
+# "OwlimHttpServer" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "OwlimHttpServer" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "OwlimHttpServer"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from integration import IntegrationTestCase
+from utils import postRequest
+
+from shutil import rmtree
+from os.path import join
+from os import remove, kill, waitpid, WNOHANG
+from simplejson import loads
+from urllib import urlopen
+from signal import SIGKILL
+
+class OwlimTest(IntegrationTestCase):
+
+    def testOne(self):
+        self.assertTrue('"vars": [ "x" ]' in urlopen("http://localhost:%s/query?query=SELECT ?x WHERE {}" % self.owlimPort).read())
+
+    def testKillTripleStoreSavesState(self):
+        postRequest(self.owlimPort, "/add?identifier=uri:record", """<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+        <rdf:Description>
+            <rdf:type>uri:testKillTripleStoreSavesState</rdf:type>
+        </rdf:Description>
+    </rdf:RDF>""", parse=False)
+        json = loads(urlopen('http://localhost:%s/query?query=SELECT ?x WHERE {?x ?y "uri:testKillTripleStoreSavesState"}' % self.owlimPort).read())
+        self.assertEquals(1, len(json['results']['bindings']))
+
+        rmtree(join(self.owlimDataDir, "transactionLog"))
+        self.restartOwlimServer()
+
+        json = loads(urlopen('http://localhost:%s/query?query=SELECT ?x WHERE {?x ?y "uri:testKillTripleStoreSavesState"}' % self.owlimPort).read())
+        self.assertEquals(1, len(json['results']['bindings']))
+
+    def testKillTripleStoreRecoversFromTransactionLog(self):
+        postRequest(self.owlimPort, "/add?identifier=uri:record", """<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+        <rdf:Description>
+            <rdf:type>uri:testKillTripleStoreRecoversFromTransactionLog</rdf:type>
+        </rdf:Description>
+    </rdf:RDF>""", parse=False)
+        json = loads(urlopen('http://localhost:%s/query?query=SELECT ?x WHERE {?x ?y "uri:testKillTripleStoreRecoversFromTransactionLog"}' % self.owlimPort).read())
+        self.assertEquals(1, len(json['results']['bindings']))
+
+        kill(self.pids['owlim'], SIGKILL)
+        waitpid(self.pids['owlim'], WNOHANG)
+        self.startOwlimServer()
+
+        json = loads(urlopen('http://localhost:%s/query?query=SELECT ?x WHERE {?x ?y "uri:testKillTripleStoreRecoversFromTransactionLog"}' % self.owlimPort).read())
+        self.assertEquals(1, len(json['results']['bindings']))
+
+    def testDeleteRecord(self): 
+        postRequest(self.owlimPort, "/add?identifier=uri:record", """<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+        <rdf:Description>
+            <rdf:type>uri:testDelete</rdf:type>
+        </rdf:Description>
+    </rdf:RDF>""", parse=False)
+        json = loads(urlopen('http://localhost:%s/query?query=SELECT ?x WHERE {?x ?y "uri:testDelete"}' % self.owlimPort).read())
+        self.assertEquals(1, len(json['results']['bindings']))
+
+        postRequest(self.owlimPort, "/update?identifier=uri:record", """<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+        <rdf:Description>
+            <rdf:type>uri:testDeleteUpdated</rdf:type>
+        </rdf:Description>
+    </rdf:RDF>""", parse=False)
+        json = loads(urlopen('http://localhost:%s/query?query=SELECT ?x WHERE {?x ?y "uri:testDelete"}' % self.owlimPort).read())
+        self.assertEquals(0, len(json['results']['bindings']))
+        json = loads(urlopen('http://localhost:%s/query?query=SELECT ?x WHERE {?x ?y "uri:testDeleteUpdated"}' % self.owlimPort).read())
+        self.assertEquals(1, len(json['results']['bindings']))
+
+        postRequest(self.owlimPort, "/delete?identifier=uri:record", "", parse=False) 
+        json = loads(urlopen('http://localhost:%s/query?query=SELECT ?x WHERE {?x ?y "uri:testDelete"}' % self.owlimPort).read())
+        self.assertEquals(0, len(json['results']['bindings']))
+        json = loads(urlopen('http://localhost:%s/query?query=SELECT ?x WHERE {?x ?y "uri:testDeleteUpdated"}' % self.owlimPort).read())
+        self.assertEquals(0, len(json['results']['bindings']))
+
+        postRequest(self.owlimPort, "/add?identifier=uri:record", """<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+        <rdf:Description>
+            <rdf:type>uri:testDelete</rdf:type>
+        </rdf:Description>
+    </rdf:RDF>""", parse=False)
+        json = loads(urlopen('http://localhost:%s/query?query=SELECT ?x WHERE {?x ?y "uri:testDelete"}' % self.owlimPort).read())
+        self.assertEquals(1, len(json['results']['bindings']))
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/integration/utils.py version_1/src/test/integration/utils.py
--- version_0/src/test/integration/utils.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/test/integration/utils.py	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,115 @@
+## begin license ##
+# 
+# All rights reserved.
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+## end license ##
+
+from amara.binderytools import bind_string
+from lxml.etree import parse as parse_lxml
+from StringIO import StringIO
+from socket import socket
+from urllib import urlencode
+from cq2utils.wrappers import wrapp
+from sys import stdout
+
+def _socket(port, timeOutInSeconds):
+    sok = socket()
+    sok.connect(('localhost', port))
+    sok.settimeout(5.0 if timeOutInSeconds is None else timeOutInSeconds)
+    return sok
+
+def createReturnValue(header, body, parse):
+    if parse == True:
+        try:
+            body = wrapp(bind_string(body))
+        except:
+            print body
+            raise
+    elif parse == 'lxml':
+        body = parse_lxml(StringIO(body))
+    return header, body
+
+
+def postRequest(port, path, data, contentType='text/xml; charset="utf-8"', parse=True, timeOutInSeconds=None):
+    sok = _socket(port, timeOutInSeconds)
+    try:
+        contentLength = len(data)
+        sendBuffer = '\r\n'.join([
+            'POST %(path)s HTTP/1.0',
+            'Content-Type: %s' % contentType,
+            'Content-Length: %(contentLength)s',
+            '', '']) % locals()
+        sendBuffer += data
+
+        totalBytesSent = 0
+        bytesSent = 0
+        while totalBytesSent != len(sendBuffer):
+            bytesSent = sok.send(sendBuffer[totalBytesSent:])
+            totalBytesSent += bytesSent
+
+        header, body = receiveFromSocket(sok)
+        return createReturnValue(header, body, parse)
+    finally:
+        sok.close()
+
+def postMultipartForm(port, path, formValues, parse=True, timeOutInSeconds=None):
+    boundary = '-=-=-=-=-=-=-=-=TestBoundary1234567890'
+    body = createPostMultipartForm(boundary, formValues)
+    return postRequest(port, path, body, contentType='multipart/form-data; boundary=' + boundary, parse=parse, timeOutInSeconds=timeOutInSeconds)
+
+def createPostMultipartForm(boundary, formValues):
+    strm = StringIO()
+    for valueDict in formValues:
+        fieldType = valueDict['type']
+        headers = {}
+        headers['Content-Disposition'] = 'form-data; name="%(name)s"' % valueDict
+        if fieldType == 'file':
+            headers['Content-Disposition'] = headers['Content-Disposition'] + '; filename="%(filename)s"' % valueDict
+            headers['Content-Type'] = valueDict['mimetype']
+
+        strm.write('--' + boundary + '\r\n')
+        for item in headers.items():
+            strm.write('%s: %s\r\n' % item)
+        strm.write('\r\n')
+        strm.write(valueDict['value'])
+        strm.write('\r\n')
+    strm.write('--' + boundary + '--\r\n')
+
+    return strm.getvalue()
+
+def getRequest(port, path, arguments, parse=True, timeOutInSeconds=None, host=None, additionalHeaders=None):
+    sok = _socket(port, timeOutInSeconds)
+    try:
+        requestString = path
+        if arguments:
+            requestString = path + '?' + urlencode(arguments, doseq=True)
+
+        request = 'GET %(requestString)s HTTP/1.0\r\n' % locals()
+        if host != None:
+            request = 'GET %(requestString)s HTTP/1.1\r\nHost: %(host)s\r\n' % locals()
+        if additionalHeaders != None:
+            for header in additionalHeaders.items():
+                request += '%s: %s\r\n' % header
+        request += '\r\n'
+
+        sok.send(request)
+
+        header, body = receiveFromSocket(sok)
+        return createReturnValue(header, body, parse)
+    finally:
+        sok.close()
+
+
+def receiveFromSocket(sok):
+    response = ''
+    part = sok.recv(1024)
+    response += part
+    while part != None:
+        part = sok.recv(1024)
+        if not part:
+            break
+        response += part
+    return response.split('\r\n\r\n', 1)
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/_integrationtest.py version_1/src/test/_integrationtest.py
--- version_0/src/test/_integrationtest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/test/_integrationtest.py	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,34 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+## begin license ##
+# 
+# All rights reserved.
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+## end license ##
+
+from sys import argv
+
+from testrunner import TestRunner
+
+from integration import globalSetUp, globalTearDown
+
+flags = ['--fast']
+
+if __name__ == '__main__':
+    fastMode = '--fast' in argv
+    for flag in flags:
+        if flag in argv:
+            argv.remove(flag)
+
+    runner = TestRunner()
+    runner.addGroup('default', [
+            'integration.owlimtest.OwlimTest',
+        ],
+        groupSetUp = lambda: globalSetUp(fastMode, 'default'),
+        groupTearDown = lambda: globalTearDown())
+
+    testnames = argv[1:]
+    runner.run(testnames)
+    
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/integrationtest.sh version_1/src/test/integrationtest.sh
--- version_0/src/test/integrationtest.sh	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/test/integrationtest.sh	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,12 @@
+#!/bin/bash
+## begin license ##
+# 
+# All rights reserved.
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+## end license ##
+
+export LANG=en_US.UTF-8
+export PYTHONPATH=.:$PYTHONPATH
+python _integrationtest.py "$@"
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java version_1/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java
--- version_0/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java	2011-10-26 15:40:38.000000000 +0200
+++ version_1/src/test/org/meresco/owlimhttpserver/OwlimHttpHandlerTest.java	2011-10-28 14:29:06.000000000 +0200
@@ -46,7 +46,6 @@
 
 import static org.meresco.owlimhttpserver.Utils.parseQS;
 
-import org.openrdf.rio.RDFFormat;
 import org.openrdf.model.Resource;
 import org.openrdf.model.URI;
 import org.openrdf.model.Value;
@@ -55,35 +54,15 @@
 
 
 public class OwlimHttpHandlerTest {
-    public class TSMock implements TripleStore {
-        public List<String> actions = new ArrayList<String>();
-
-        public void addRDF(String identifier, String data, RDFFormat format) {
-            actions.add("add:" + identifier + "|" + data);
-        }
-
-        public void delete(String identifier) {
-            actions.add("delete:" + identifier);
-        }
-
-        public String executeQuery(String sparQL) {
-            actions.add("executeQuery:" + sparQL);
-            return "<result/>";
-        }
-
-        public RepositoryResult<Statement> getStatements(Resource subj, URI pred, Value obj) {
-            throw new UnsupportedOperationException("!");
-        }
-    }
 
 
     public class OwlimHttpHandlerMock extends OwlimHttpHandler {
         public List<Object> actions = new ArrayList<Object>();
         private Exception _exception = null;
 
-        public OwlimHttpHandlerMock() { super(null); }
+        public OwlimHttpHandlerMock() { super(null, null); }
         public OwlimHttpHandlerMock(Exception e) { 
-            super(null); 
+            super(null, null); 
             _exception = e; 
         }
 
@@ -158,32 +137,35 @@
     }
 
 
-    @Test public void testAddRDF() {
+    @Test public void testAddRDF() throws TransactionLogException {
         TSMock tsmock = new TSMock();
-        OwlimHttpHandler h = new OwlimHttpHandler(tsmock);
+        TLMock tlmock = new TLMock();
+        OwlimHttpHandler h = new OwlimHttpHandler(tlmock, tsmock);
         String queryString = "identifier=identifier";
         String httpBody = "<rdf/>";
         h.addRDF(parseQS(queryString), httpBody);
-        assertEquals(Arrays.asList("add:identifier" + "|" + httpBody), tsmock.actions);
+        assertEquals(Arrays.asList("add:identifier" + "|" + httpBody), tlmock.actions);
     }
 
-    @Test public void testDeleteRDF() {
+    @Test public void testDeleteRDF() throws TransactionLogException {
         TSMock tsmock = new TSMock();
-        OwlimHttpHandler h = new OwlimHttpHandler(tsmock);
+        TLMock tlmock = new TLMock();
+        OwlimHttpHandler h = new OwlimHttpHandler(tlmock, tsmock);
         String queryString = "identifier=identifier";
         h.deleteRDF(parseQS(queryString));
-        assertEquals(Arrays.asList("delete:identifier"), tsmock.actions);
+        assertEquals(Arrays.asList("delete:identifier"), tlmock.actions);
     }
 
-    @Test public void testUpdateRDF() {
+    @Test public void testUpdateRDF() throws TransactionLogException {
         TSMock tsmock = new TSMock();
-        OwlimHttpHandler h = new OwlimHttpHandler(tsmock);
+        TLMock tlmock = new TLMock();
+        OwlimHttpHandler h = new OwlimHttpHandler(tlmock, tsmock);
         String httpBody = "<rdf/>";
         h.updateRDF(parseQS("identifier=id0"), httpBody);
         assertEquals(Arrays.asList(
                         "delete:id0",
                         "add:id0|<rdf/>"), 
-                     tsmock.actions);
+                     tlmock.actions);
         h.updateRDF(parseQS("identifier=id1"), httpBody);
         h.updateRDF(parseQS("identifier=id0"), httpBody);
         assertEquals(Arrays.asList(
@@ -193,12 +175,13 @@
                         "add:id1|<rdf/>",
                         "delete:id0",
                         "add:id0|<rdf/>"), 
-                     tsmock.actions);
+                     tlmock.actions);
     }
 
-    @Test public void testSparQL() {
+    @Test public void testSparQL() throws TransactionLogException {
         TSMock tsmock = new TSMock();
-        OwlimHttpHandler h = new OwlimHttpHandler(tsmock);
+        TLMock tlmock = new TLMock();
+        OwlimHttpHandler h = new OwlimHttpHandler(tlmock, tsmock);
         String queryString = "query=SELECT+%3Fx+%3Fy+%3Fz+WHERE+%7B+%3Fx+%3Fy+%3Fz+%7D"; 
         String result = h.executeQuery(parseQS(queryString));
         
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java version_1/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java
--- version_0/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java	2011-10-26 15:40:38.000000000 +0200
+++ version_1/src/test/org/meresco/owlimhttpserver/OwlimTripleStoreTest.java	2011-10-28 14:29:06.000000000 +0200
@@ -42,19 +42,14 @@
 import org.openrdf.model.impl.URIImpl;
 import org.openrdf.model.impl.LiteralImpl;
 
-import org.openrdf.rio.RDFFormat;
-
-
 public class OwlimTripleStoreTest {
     OwlimTripleStore ts;
     File tempdir;
-    File rdfTempDir;
 
     @Before
     public void setUp() throws Exception {
         tempdir = createTempDirectory();
-        rdfTempDir = createTempDirectory();
-        ts = new OwlimTripleStore(tempdir, "storageName", rdfTempDir);
+        ts = new OwlimTripleStore(tempdir, "storageName");
     }
 
     @After
@@ -65,7 +60,6 @@
     @Test
     public void testOne() {
         assertEquals(tempdir.getAbsolutePath(), ts.dir.getAbsolutePath());
-        assertEquals(rdfTempDir.getAbsolutePath(), ts.rdfDir.getAbsolutePath());
         assertTrue(new File(new File(tempdir, "storageName"), "entities").isFile());
     }
 
@@ -81,7 +75,7 @@
     @Test
     public void testAddRDFGetStatements() throws Exception {
         long startingPoint = ts.size();
-        ts.addRDF("uri:id0", rdf, RDFFormat.RDFXML);
+        ts.addRDF("uri:id0", rdf);
         RepositoryResult<Statement> statements = ts.getStatements(null, null, null);
         assertEquals(startingPoint + 2, statements.asList().size());
         List<Statement> statementList = ts.getStatements(new URIImpl("http://www.example.org/index.html"), null, null).asList();
@@ -92,7 +86,7 @@
 
     @Test
     public void testDelete() throws Exception {
-        ts.addRDF("uri:id0", rdf, RDFFormat.RDFXML);
+        ts.addRDF("uri:id0", rdf);
         long startingPoint = ts.size();
         ts.delete("uri:id0");
         assertEquals(startingPoint - 2, ts.size());
@@ -102,24 +96,34 @@
     public void testSparql() throws Exception {
         String answer = null;
 
-        ts.addRDF("uri:id0", rdf, RDFFormat.RDFXML);
+        ts.addRDF("uri:id0", rdf);
         answer = ts.executeQuery("SELECT ?x ?y ?z WHERE {?x ?y ?z}");
         assertTrue(answer.indexOf("\"z\": { \"type\": \"literal\", \"value\": \"A.M. Özman Yürekli\" },") > -1);
         assertTrue(answer.endsWith("\n}"));
     }
-
+    
     @Test
-    public void testLoadRdfFilesOnStartup() throws Exception {
-        FileWriter tmpFile = new FileWriter(rdfTempDir.getAbsolutePath() + "/uri:tmpfile.rdf");
-        tmpFile.write(rdf);
-        tmpFile.close();
-
-        FileWriter tmpFile2 = new FileWriter(rdfTempDir.getAbsolutePath() + "/.ignoreMe.txt");
-        tmpFile2.close();
+    public void testShutdown() throws Exception {
+        ts.addRDF("uri:id0", rdf);
+        ts.shutdown();
+        OwlimTripleStore ts = new OwlimTripleStore(tempdir, "storageName");
+        RepositoryResult<Statement> statements = ts.getStatements(null, null, null);
+        assertEquals(2, statements.asList().size());
+    }
 
-        OwlimTripleStore ts = new OwlimTripleStore(tempdir, "storageName", rdfTempDir);
-        String answer = ts.executeQuery("SELECT ?x ?y ?z WHERE {?x ?y ?z}");
-        assertTrue(answer.indexOf("\"z\": { \"type\": \"literal\", \"value\": \"A.M. Özman Yürekli\" },") > -1);
-        assertTrue(answer.endsWith("\n}"));
+    @Test
+    public void testShutdownFails() throws Exception {
+        File tsPath = new File(tempdir, "anotherOne");
+        ts = new OwlimTripleStore(tempdir, "anotherOne");
+        ts.shutdown();
+        ts.startup();
+        File contextFile = new File(tsPath, "Contexts.ids");
+        Runtime.getRuntime().exec("chmod 0000 " + contextFile);
+        try {
+            ts.shutdown();
+            fail("Triplestore shouldn't shutdown correctly");
+        } catch (Exception e) {
+            assertTrue(e.toString().contains("org.openrdf.repository.RepositoryException"));
+        }
     }
 }
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/org/meresco/owlimhttpserver/TLMock.java version_1/src/test/org/meresco/owlimhttpserver/TLMock.java
--- version_0/src/test/org/meresco/owlimhttpserver/TLMock.java	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/test/org/meresco/owlimhttpserver/TLMock.java	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,41 @@
+/* begin license *
+ * 
+ * "OwlimHttpServer" provides a simple HTTP interface to an OWLim triplestore. 
+ * 
+ * Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+ * 
+ * This file is part of "OwlimHttpServer"
+ * 
+ * "OwlimHttpServer" is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * 
+ * "OwlimHttpServer" is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with "OwlimHttpServer"; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ * 
+ * end license */
+
+package org.meresco.owlimhttpserver;
+
+import java.util.List;
+import java.util.ArrayList;
+
+public class TLMock extends TransactionLog {
+    public List<String> actions = new ArrayList<String>();
+
+    public void add(String identifier, String data) {
+        actions.add("add:" + identifier + "|" + data);
+    }
+
+    public void delete(String identifier) {
+        actions.add("delete:" + identifier);
+    }
+}
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/org/meresco/owlimhttpserver/TransactionItemTest.java version_1/src/test/org/meresco/owlimhttpserver/TransactionItemTest.java
--- version_0/src/test/org/meresco/owlimhttpserver/TransactionItemTest.java	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/test/org/meresco/owlimhttpserver/TransactionItemTest.java	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,84 @@
+/* begin license *
+ * 
+ * "OwlimHttpServer" provides a simple HTTP interface to an OWLim triplestore. 
+ * 
+ * Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+ * Copyright (C) 2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
+ * 
+ * This file is part of "OwlimHttpServer"
+ * 
+ * "OwlimHttpServer" is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * 
+ * "OwlimHttpServer" is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with "OwlimHttpServer"; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ * 
+ * end license */
+
+package org.meresco.owlimhttpserver;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.FileInputStream;
+import java.io.BufferedWriter;
+import java.lang.RuntimeException;
+
+import org.apache.commons.lang3.StringEscapeUtils;
+import org.xml.sax.SAXException;
+import org.junit.Test;
+import org.junit.Before;
+import org.junit.After;
+import static org.junit.Assert.*;
+
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.xpath.XPathExpressionException;
+
+import static org.meresco.owlimhttpserver.Utils.createTempDirectory;
+import static org.meresco.owlimhttpserver.Utils.deleteDirectory;
+
+public class TransactionItemTest {
+    File tempdir;
+
+    @Before
+    public void setUp() throws Exception {
+        tempdir = createTempDirectory();
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        deleteDirectory(tempdir);
+    }
+
+    @Test
+    public void testReadTransactionItem() throws Exception {
+        String action = "addRDF";
+        String identifier = "record1";
+        String filedata = "<x>ignored</x>";
+        File filepath = new File(tempdir, identifier);
+
+        FileWriter fstream = new FileWriter(filepath);
+        BufferedWriter out = new BufferedWriter(fstream);
+        out.write("<transaction_item>" +
+            "<action>" + action + "</action>" +
+            "<identifier>" + identifier + "</identifier>" + 
+            "<filedata>" + StringEscapeUtils.escapeXml(filedata) + "</filedata>" +
+            "</transaction_item>");
+        out.close();
+
+        TransactionItem transactionItem = TransactionItem.read(filepath);
+        assertEquals(action, transactionItem.getAction());
+        assertEquals(identifier, transactionItem.getIdentifier());
+        assertEquals(filedata, transactionItem.getFiledata());
+    } 
+}
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/org/meresco/owlimhttpserver/TransactionLogTest.java version_1/src/test/org/meresco/owlimhttpserver/TransactionLogTest.java
--- version_0/src/test/org/meresco/owlimhttpserver/TransactionLogTest.java	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/test/org/meresco/owlimhttpserver/TransactionLogTest.java	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,467 @@
+/* begin license *
+ * 
+ * "OwlimHttpServer" provides a simple HTTP interface to an OWLim triplestore. 
+ * 
+ * Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+ * Copyright (C) 2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
+ * 
+ * This file is part of "OwlimHttpServer"
+ * 
+ * "OwlimHttpServer" is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * 
+ * "OwlimHttpServer" is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with "OwlimHttpServer"; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ * 
+ * end license */
+
+package org.meresco.owlimhttpserver;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.lang.RuntimeException;
+
+import org.junit.Test;
+import org.junit.Before;
+import org.junit.After;
+import static org.junit.Assert.*;
+
+import static org.meresco.owlimhttpserver.Utils.createTempDirectory;
+import static org.meresco.owlimhttpserver.Utils.deleteDirectory;
+
+public class TransactionLogTest {
+    TransactionLog transactionLog;
+    File tempdir;
+    TSMock tsMock;
+
+    @Before
+    public void setUp() throws Exception {
+        tempdir = createTempDirectory();
+        tsMock = new TSMock();
+        transactionLog = new TransactionLog(tsMock, tempdir);
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        deleteDirectory(tempdir);
+    }
+
+    @Test
+    public void testAddToTransactionLog() throws Exception {
+        String filename = String.valueOf(System.currentTimeMillis());
+        transactionLog.prepare("addRDF", "testRecord", filename, "<x>ignored</x>");
+        assertTrue(new File(transactionLog.getTempLogDir().toString(), filename).isFile());
+    }
+
+    @Test
+    public void testPrepareWithSameFilename() throws Exception {
+        String filename = String.valueOf(System.currentTimeMillis());
+        transactionLog.prepare("addRDF", "testRecord", filename, "<x>ignored</x>");
+        transactionLog.prepare("addRDF", "testRecord", filename, "<x>ignored</x>");
+        assertEquals(2, this.transactionLog.getTempLogDir().list().length);
+    }
+
+    @Test
+    public void testCommitToTransactionLog() throws FileNotFoundException, Exception {
+        String filename = String.valueOf(System.currentTimeMillis());
+        String xml = "<x>ignored</x>";
+        transactionLog.prepare("addRDF", "testRecord", filename, xml);
+        transactionLog.commit(filename);
+        String[] files = transactionLog.getTransactionItemFiles();
+        assertEquals(1, files.length);
+        assertEquals(filename, files[0]);
+        String expectedXml = "<transaction_item>" +
+                "<action>addRDF</action>" +
+                "<identifier>testRecord</identifier>" + 
+                "<filedata>&lt;x&gt;ignored&lt;/x&gt;</filedata>" +
+            "</transaction_item>";
+        FileInputStream fileInputStream = new FileInputStream(new File(transactionLog.getTransactionLogDir(), files[0]));
+        assertEquals(expectedXml, Utils.read(fileInputStream));
+    }
+
+    @Test
+    public void testCheckIsAddedToLogWhenExists() throws Exception {
+        String filenameTransactionLog;
+        String filename = String.valueOf(System.currentTimeMillis());
+        filenameTransactionLog = transactionLog.prepare("addRDF", "testRecord", filename, "<x>ignored</x>");
+        assertEquals(filename, filenameTransactionLog);
+        filenameTransactionLog = transactionLog.prepare("addRDF", "testRecord", filename, "<x>ignored</x>");
+        assertEquals(filename + "_1", filenameTransactionLog);
+        filenameTransactionLog = transactionLog.prepare("addRDF", "testRecord", filename, "<x>ignored</x>");
+        assertEquals(filename + "_1_1", filenameTransactionLog);
+        transactionLog.commit(filename);
+        String[] files = transactionLog.getTransactionItemFiles();
+        assertEquals(1, files.length);
+        assertEquals(filename, files[0]);
+    }
+
+    @Test 
+    public void testCommitWithExistingName() throws Exception {
+        String filename = String.valueOf(System.currentTimeMillis());
+        transactionLog.prepare("addRDF", "testRecord", filename, "<x>ignored</x>");
+        transactionLog.commit(filename);
+        transactionLog.prepare("addRDF", "testRecord", filename, "<x>ignored</x>");
+        transactionLog.commit(filename);
+        transactionLog.prepare("addRDF", "testRecord", filename, "<x>ignored</x>");
+        transactionLog.commit(filename);
+        String[] files = transactionLog.getTransactionItemFiles();
+        assertEquals(3, files.length);
+        assertEquals(filename, files[0]);
+        assertEquals(filename + "_1", files[1]);
+        assertEquals(filename + "_1_1", files[2]);
+    }
+
+    @Test
+    public void testEscapeIdentifier() throws FileNotFoundException, Exception {
+        String filename = String.valueOf(System.currentTimeMillis());
+        transactionLog.prepare("addRDF", "<testRecord>", filename, "<x>ignored</x>");
+        String expectedXml = "<transaction_item>" +
+                "<action>addRDF</action>" +
+                "<identifier>&lt;testRecord&gt;</identifier>" + 
+                "<filedata>&lt;x&gt;ignored&lt;/x&gt;</filedata>" +
+            "</transaction_item>";
+        FileInputStream fileInputStream = new FileInputStream(new File(transactionLog.getTempLogDir(), filename));
+        assertEquals(expectedXml, Utils.read(fileInputStream));
+    }
+
+    @Test
+    public void testAddSuccesfullRecord() throws FileNotFoundException, TransactionLogException {
+        transactionLog.add("record", "<x>ignored</x>");
+        String[] files = transactionLog.getTransactionItemFiles();
+        assertEquals(1, files.length);
+        String expectedXml = "<transaction_item>" +
+                "<action>addRDF</action>" +
+                "<identifier>record</identifier>" + 
+                "<filedata>&lt;x&gt;ignored&lt;/x&gt;</filedata>" +
+            "</transaction_item>";
+        FileInputStream fileInputStream = new FileInputStream(new File(transactionLog.getTransactionLogDir(), files[0]));
+        assertEquals(expectedXml, Utils.read(fileInputStream));
+    }
+
+    @Test
+    public void testAddDeleteRecord() throws FileNotFoundException, TransactionLogException {
+        transactionLog.delete("record");
+        String[] files = transactionLog.getTransactionItemFiles();
+        assertEquals(1, files.length);
+        String expectedXml = "<transaction_item>" +
+                "<action>delete</action>" +
+                "<identifier>record</identifier>" + 
+                "<filedata></filedata>" +
+            "</transaction_item>";
+        FileInputStream fileInputStream = new FileInputStream(new File(transactionLog.getTransactionLogDir(), files[0]));
+        assertEquals(expectedXml, Utils.read(fileInputStream));
+    }
+
+    @Test
+    public void testAddNotWhenFailed() throws IOException {
+        class MyTripleStore extends OwlimTripleStore {
+            public void addRDF(String identifier, String body) {
+                throw new RuntimeException();
+            }
+        }
+        TransactionLog transactionLog = new TransactionLog(new MyTripleStore(), tempdir);
+        try {
+            transactionLog.add("record", "<x>ignored</x>");
+            fail("Should raise an TransactionLogException");
+        } catch (TransactionLogException e) {}
+        String[] files = transactionLog.getTransactionItemFiles();
+        assertEquals(0, files.length);
+    }
+
+    @Test
+    public void testAddWhenAlreadyExistsInTemp() throws Exception {
+        final String time = String.valueOf(System.currentTimeMillis());
+        class MyTransactionLog extends TransactionLog {
+            public MyTransactionLog(TripleStore tripleStore, File baseDir) throws IOException {
+                super(tripleStore, baseDir);
+            }
+            String getTime() {
+                return time;
+            }
+        }
+        transactionLog = new MyTransactionLog(tsMock, tempdir);
+        transactionLog.prepare("addRDF", "testRecord", time, "<x>ignored</x>");
+
+        transactionLog.add("testRecord", "data");
+        String[] files = transactionLog.getTransactionItemFiles();
+        assertEquals(1, files.length);
+        FileInputStream fileInputStream = new FileInputStream(new File(transactionLog.getTransactionLogDir(), files[0]));
+        assertTrue(Utils.read(fileInputStream).contains("data"));
+    }
+
+    @Test
+    public void testRollback() throws Exception {
+        String filename = String.valueOf(System.currentTimeMillis());
+        transactionLog.prepare("addRDF", "record1", filename, "data");
+        transactionLog.prepare("addRDF", "record1", filename + "_1", "data");
+        transactionLog.rollback(filename);
+        String[] tmpFiles = transactionLog.getTempLogDir().list();
+        String[] expected = {filename + "_1"};
+        assertArrayEquals(expected, tmpFiles); 
+    }
+
+    @Test
+    public void testRollbackNothingToDo() throws Exception {
+        String filename = String.valueOf(System.currentTimeMillis());
+        transactionLog.prepare("addRDF", "record1", filename + "_1", "data");
+        transactionLog.rollback(filename);
+        String[] tmpFiles = transactionLog.getTempLogDir().list();
+        String[] expected = {filename + "_1"};
+        assertArrayEquals(expected, tmpFiles); 
+    }
+
+    @Test
+    public void testRollbackWhenPrepareFailes() throws IOException {
+        final List<Boolean> rollback = new ArrayList<Boolean>();
+        class MyTransactionLog extends TransactionLog {
+            public MyTransactionLog(TripleStore tripleStore, File baseDir) throws IOException {
+                super(tripleStore, baseDir);
+            }
+            String prepare(String action, String identifier, String filename, String filedata) {
+                throw new RuntimeException();
+            }
+            void rollback(String filename) {
+                rollback.add(true);
+            }
+        }
+        transactionLog = new MyTransactionLog(tsMock, tempdir);
+        try {
+            transactionLog.doProcess("addRDF", "record", "data");
+            fail("Should raise an Exception");
+        } catch (TransactionLogException e) {}
+        assertTrue(rollback.get(0));
+    }
+
+    @Test
+    public void testRollbackWhenAddRDFFailes() throws IOException {
+        final List<Boolean> rollback = new ArrayList<Boolean>();
+        class MyTripleStore extends OwlimTripleStore {
+            public void addRDF(String identifier, String body) {
+                throw new RuntimeException();
+            }
+        }
+        class MyTransactionLog extends TransactionLog {
+            public MyTransactionLog(TripleStore tripleStore, File baseDir) throws IOException {
+                super(tripleStore, baseDir);
+            }
+            void rollback(String filename) {
+                rollback.add(true);
+            }
+        }
+        TransactionLog transactionLog = new MyTransactionLog(new MyTripleStore(), tempdir);
+        try {
+            transactionLog.add("record", "data");
+            fail("Should raise an Exception");
+        } catch (TransactionLogException e) {}
+        assertTrue(rollback.get(0));
+    }
+
+    @Test
+    public void testRollbackWhenDeleteFailes() throws IOException {
+        final List<Boolean> rollback = new ArrayList<Boolean>();
+        class MyTripleStore extends OwlimTripleStore {
+            public void delete(String identifier, String body) {
+                throw new RuntimeException();
+            }
+        }
+        class MyTransactionLog extends TransactionLog {
+            public MyTransactionLog(TripleStore tripleStore, File baseDir) throws IOException {
+                super(tripleStore, baseDir);
+            }
+            void rollback(String filename) {
+                rollback.add(true);
+            }
+        }
+        TransactionLog transactionLog = new MyTransactionLog(new MyTripleStore(), tempdir);
+        try {
+            transactionLog.delete("record");
+            fail("Should raise an Exception");
+        } catch (TransactionLogException e) {}
+        assertTrue(rollback.get(0));
+    }
+
+    @Test
+    public void testRollbackAll() throws IOException {
+        final List<String> rollback = new ArrayList<String>();
+        class MyTransactionLog extends TransactionLog {
+            public MyTransactionLog(TripleStore tripleStore, File baseDir) throws IOException {
+                super(tripleStore, baseDir);
+            }
+            void rollback(String filename) {
+                rollback.add(filename);
+            }
+        }
+        
+        transactionLog = new MyTransactionLog(tsMock, tempdir);
+        transactionLog.rollbackAll("record");
+        assertEquals("record", rollback.get(0));
+        assertEquals("undoCommit", tsMock.actions.get(0));
+    }
+
+    @Test
+    public void testRollbackWhenCommitFailes() throws IOException {
+        final List<Boolean> rollbackAll = new ArrayList<Boolean>();
+        class MyTransactionLog extends TransactionLog {
+            public MyTransactionLog(TripleStore tripleStore, File baseDir) throws IOException {
+                super(tripleStore, baseDir);
+            }
+            void commit(String filename) {
+                throw new RuntimeException();
+            }
+            void rollbackAll(String filename) {
+                rollbackAll.add(true);
+            }
+        }
+        transactionLog = new MyTransactionLog(tsMock, tempdir);
+        try {
+            transactionLog.doProcess("addRDF", "record", "data");
+            fail("Should raise an Exception");
+        } catch (TransactionLogException e) {}
+        assertTrue(rollbackAll.get(0));
+    }
+
+    @Test
+    public void testClearTransactionLog() throws TransactionLogException, IOException {
+        transactionLog.add("record", "data");
+        assertEquals(1, transactionLog.getTransactionItemFiles().length);
+        transactionLog.clear();
+        assertEquals(0, transactionLog.getTransactionItemFiles().length);
+    }
+
+    @Test
+    public void testClearWhenShutdownSuccesFull() throws Exception {
+        addFilesToTransactionLog();
+        assertEquals(2, transactionLog.getTransactionItemFiles().length);
+        transactionLog.persistTripleStore();
+        assertEquals(0, transactionLog.getTransactionItemFiles().length);
+    }
+
+    @Test
+    public void testClearNotWhenShutdownFails() throws TransactionLogException, IOException {
+        addFilesToTransactionLog();
+        assertEquals(2, transactionLog.getTransactionItemFiles().length);
+
+        class MyTripleStore extends OwlimTripleStore {
+            public void shutdown() {
+                throw new RuntimeException();
+            }
+        }
+        transactionLog = new TransactionLog(new MyTripleStore(), tempdir);
+        try {
+            transactionLog.persistTripleStore();
+            fail("Should raise an error");
+        } catch (Exception e) {
+            assertEquals(2, transactionLog.getTransactionItemFiles().length);
+        }
+    }
+
+    @Test
+    public void testStartupAfterShutdown() throws Exception {
+        addFilesToTransactionLog();
+        assertEquals(2, transactionLog.getTransactionItemFiles().length);
+
+        this.tsMock = new TSMock();
+        transactionLog = new TransactionLog(this.tsMock, this.tempdir);
+        transactionLog.persistTripleStore();
+        assertEquals(2, this.tsMock.actions.size());
+        assertEquals("shutdown", this.tsMock.actions.get(0));
+        assertEquals("startup", this.tsMock.actions.get(1));
+    }
+    @Test
+    public void testRecoverTransactionLog() throws TransactionLogException, Exception {
+        addFilesToTransactionLog();
+        tsMock = new TSMock();
+        transactionLog = new TransactionLog(tsMock, tempdir);
+        transactionLog.recoverTripleStore();
+        assertEquals(2, tsMock.actions.size());
+        assertEquals("add:testRecord.rdf|<x>ignored</x>", tsMock.actions.get(0));
+        assertEquals("delete:testRecord.rdf", tsMock.actions.get(1));
+    }
+
+    @Test
+    public void testRemoveFilesWhenTransactionLogIsRecovered() throws Exception {
+        addFilesToTransactionLog();
+        transactionLog.recoverTripleStore();
+        transactionLog.persistTripleStore();
+        assertEquals(0, transactionLog.getTransactionLogDir().list().length);
+    }
+
+    @Test
+    public void testOnlyRecoverIfFilesInTransactionLog() throws Exception {
+        assertFalse(transactionLog.recoverTripleStore());
+        addFilesToTransactionLog();
+        assertTrue(transactionLog.recoverTripleStore());
+    }
+
+    @Test
+    public void testNotPersistingOnInitIfTransactionLogIsEmpty() throws Exception {
+        final List<Boolean> recoverCalled = new ArrayList<Boolean>();
+        final List<Boolean> persistCalled = new ArrayList<Boolean>();
+        class MyTransactionLog extends TransactionLog {
+            public MyTransactionLog(TripleStore triplestore, File baseDir) throws IOException {
+                super(triplestore, baseDir);
+            }
+            void persistTripleStore() {
+                persistCalled.add(true);
+            }
+            boolean recoverTripleStore() {
+                recoverCalled.add(true);
+                return false;
+            }
+        }
+        transactionLog = new MyTransactionLog(tsMock, tempdir);
+        transactionLog.init();
+        assertTrue(recoverCalled.get(0));
+        assertEquals(0, persistCalled.size());
+    } 
+
+    @Test
+    public void testPersistOnInitIfTransactionLogIsNotEmpty() throws Exception {
+        final List<Boolean> recoverCalled = new ArrayList<Boolean>();
+        final List<Boolean> persistCalled = new ArrayList<Boolean>();
+        class MyTransactionLog extends TransactionLog {
+            public MyTransactionLog(TripleStore triplestore, File baseDir) throws IOException {
+                super(triplestore, baseDir);
+            }
+            void persistTripleStore() {
+                persistCalled.add(true);
+            }
+            boolean recoverTripleStore() {
+                recoverCalled.add(true);
+                return true;
+            }
+        }
+        transactionLog = new MyTransactionLog(tsMock, tempdir);
+        transactionLog.init();
+        assertTrue(recoverCalled.get(0));
+        assertTrue(persistCalled.get(0));
+    } 
+
+    @Test
+    public void testClearTempLogDir() throws Exception {
+        String filename = String.valueOf(System.currentTimeMillis());
+        transactionLog.prepare("addRDF", "record", filename, "ignored");
+        transactionLog.prepare("addRDF", "record", filename + "_1", "ignored");
+        assertEquals(2, transactionLog.getTempLogDir().list().length);
+        transactionLog = new TransactionLog(tsMock, tempdir);
+        assertEquals(0, transactionLog.getTempLogDir().list().length);
+    }
+
+    private void addFilesToTransactionLog() throws TransactionLogException {
+        transactionLog.add("testRecord.rdf", "<x>ignored</x>");
+        transactionLog.delete("testRecord.rdf");
+    }
+}
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/org/meresco/owlimhttpserver/TSMock.java version_1/src/test/org/meresco/owlimhttpserver/TSMock.java
--- version_0/src/test/org/meresco/owlimhttpserver/TSMock.java	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/test/org/meresco/owlimhttpserver/TSMock.java	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,68 @@
+/* begin license *
+ * 
+ * "OwlimHttpServer" provides a simple HTTP interface to an OWLim triplestore. 
+ * 
+ * Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+ * 
+ * This file is part of "OwlimHttpServer"
+ * 
+ * "OwlimHttpServer" is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * 
+ * "OwlimHttpServer" is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with "OwlimHttpServer"; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ * 
+ * end license */
+
+package org.meresco.owlimhttpserver;
+
+import java.util.List;
+import java.util.ArrayList;
+
+import org.openrdf.model.Resource;
+import org.openrdf.model.URI;
+import org.openrdf.model.Value;
+import org.openrdf.repository.RepositoryResult;
+import org.openrdf.model.Statement;
+
+public class TSMock implements TripleStore {
+    public List<String> actions = new ArrayList<String>();
+
+    public void addRDF(String identifier, String data) {
+        actions.add("add:" + identifier + "|" + data);
+    }
+
+    public void delete(String identifier) {
+        actions.add("delete:" + identifier);
+    }
+
+    public String executeQuery(String sparQL) {
+        actions.add("executeQuery:" + sparQL);
+        return "<result/>";
+    }
+
+    public RepositoryResult<Statement> getStatements(Resource subj, URI pred, Value obj) {
+        throw new UnsupportedOperationException("!");
+    }
+
+    public void undoCommit() {
+        actions.add("undoCommit");
+    }
+
+    public void shutdown() {
+        actions.add("shutdown");
+    }
+    
+    public void startup() {
+        actions.add("startup");
+    }
+}
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/src/test/testrunner.py version_1/src/test/testrunner.py
--- version_0/src/test/testrunner.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/src/test/testrunner.py	2011-10-28 14:29:06.000000000 +0200
@@ -0,0 +1,169 @@
+## begin license ##
+# 
+# "Edurep" is a service for searching in educational repositories.
+# "Edurep" is developed for Stichting Kennisnet (http://www.kennisnet.nl) by
+# Seek You Too (http://www.cq2.nl). The project is based on the opensource
+# project Meresco (http://www.meresco.com). 
+# 
+# Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Edurep"
+# 
+# "Edurep" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Edurep" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Edurep"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from sys import stdout, stderr
+from time import time
+from traceback import print_exc
+from unittest import TestSuite, TestLoader, TestResult as UnitTestResult
+
+class TestResult(UnitTestResult):
+    def __init__(self, stream=stdout, errStream=stderr, verbosity=1):
+        UnitTestResult.__init__(self)
+        self.showAll = verbosity > 1
+        self.dots = verbosity == 1
+        self._errStream = errStream
+        self._stream = stream
+
+    def startTest(self, test):
+        UnitTestResult.startTest(self, test)
+        if self.showAll:
+            self._errWrite(str(test))
+            self._errWrite(' ... ')
+
+    def addError(self, test, err):
+        UnitTestResult.addError(self, test, err)
+        if self.showAll:
+            self._errWrite('ERROR\n')
+        elif self.dots:
+            self._errWrite('E')
+
+    def addFailure(self, test, err):
+        UnitTestResult.addFailure(self, test, err)
+        if self.showAll:
+            self._errWrite('FAIL\n')
+        elif self.dots:
+            self._errWrite('F')
+
+    def addSuccess(self, test):
+        UnitTestResult.addSuccess(self, test)
+        if self.showAll:
+            self._errWrite('ok\n')
+        elif self.dots:
+            self._errWrite('.')
+
+    def printResult(self, timeTaken):
+        self._write('\n')
+        self._printErrorList('ERROR', self.errors)
+        self._printErrorList('FAIL', self.failures)
+        run = self.testsRun
+        self._write(sep2)
+        self._write('\033[1;%sm' % (32 if self.wasSuccessful() else 31))
+        self._write("Ran %d test%s in %.3fs\n" % (run, run != 1 and "s" or "", timeTaken))
+        self._write("\n")
+        if not self.wasSuccessful():
+            output = "FAILED ("
+            failed, errored = map(len, (self.failures, self.errors))
+            if failed:
+                output += "failures=%d" % failed
+            if errored:
+                if failed: output += ", "
+                output += "errors=%d" % errored
+            self._write(output + ")\n")
+        else:
+            self._write("OK\n")
+        self._write('\033[0m')
+
+    def _printErrorList(self, flavour, errors):
+        for test, err in errors:
+            self._write(sep1)
+            self._write("%s: %s\n" % (flavour, test.shortDescription() or str(test)))
+            self._write(sep2)
+            self._write("%s\n" % err)
+
+    def _errWrite(self, aString):
+        self._errStream.write(aString)
+        self._errStream.flush()
+
+    def _write(self, aString):
+        self._stream.write(aString)
+        self._stream.flush()
+
+
+class TestGroup(object):
+    def __init__(self, name, classnames=None, groupSetUp=lambda:None, groupTearDown=lambda:None):
+        self.name = name
+        self._classes = {}
+        for classname in (classnames or []):
+            self._loadClass(classname)
+        self._loader = TestLoader()
+        self.setUp = groupSetUp
+        self.tearDown = groupTearDown
+
+    def _loadClass(self, classname):
+        moduleName, className = classname.rsplit('.', 1)
+        cls = getattr(__import__(moduleName, globals(), locals(), [className]), className)
+        self._classes[className] = cls
+
+    def createSuite(self, testnames=None):
+        if not testnames:
+            testnames = sorted(self._classes.keys())
+        suite = TestSuite()
+        for testname in testnames:
+            testcase = testname.split('.')
+            testclass = self._classes.get(testcase[0], None)
+            if not testclass:
+                continue
+            if len(testcase) == 1:
+                suite.addTest(self._loader.loadTestsFromTestCase(testclass))
+            else:
+                suite.addTest(self._loader.loadTestsFromName(testcase[1], testclass))
+        return suite
+
+class TestRunner(object):
+    def __init__(self):
+        self._groups = []
+        self._stream = stdout
+
+    def addGroup(self, *args, **kwargs):
+        self._groups.append(TestGroup(*args, **kwargs))
+
+    def run(self, testnames=None, groupnames=None):
+        t0 = time()
+        testResult = TestResult()
+        quit = False
+        groups = self._groups
+        if groupnames:
+            groups = (group for group in self._groups if group.name in groupnames)
+        for group in groups:
+            suite = group.createSuite(testnames)
+            if not suite.countTestCases():
+                continue
+            try:
+                group.setUp() 
+                suite.run(testResult)
+            except:
+                print_exc()
+                break
+            finally:
+                group.tearDown()
+        timeTaken = time() - t0
+        testResult.printResult(timeTaken)
+
+sep1 = '=' * 70 + '\n'
+sep2 = '-' * 70 + '\n'
